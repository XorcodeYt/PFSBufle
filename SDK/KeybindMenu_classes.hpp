#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KeybindMenu

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass KeybindMenu.KeybindMenu_C
// 0x0290 (0x0520 - 0x0290)
class UKeybindMenu_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                ApplyButton;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_0;                                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelecterBackward;                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelecterBannana;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelecterForward;                                // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelecterLeft;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelecterRight;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelecterSprint;                                 // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelectorBlunderbomb;                            // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelectorEmote;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelectorInteract;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      KeySelectorSwitchKey;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ResetBinds;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ATrainGusPlayer_C*                      Char_REF;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BFOV;                                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sens2;                                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARocketeer_C*                           Char_REF_0;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveOptions_C*                         SaverSubClass;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Game_save1;                                        // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class USaveGame*                              SaveOptions;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Load_Settings;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Sens;                                              // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sniper_Sens;                                       // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kill_Confirmed_Widget;                             // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Hitmarker_Size;                                    // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Hitmarker_Type;                                    // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Lumin;                                             // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blunder_Pistol_Sens;                               // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputActionKeyMapping                 Bannana_Current_Key;                               // 0x0390(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputActionKeyMapping                 Interact_Current_Key;                              // 0x03B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputActionKeyMapping                 Blunderbomb_Current_Key;                           // 0x03E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputActionKeyMapping                 Emote_Current_Key;                                 // 0x0408(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputActionKeyMapping                 SwitchKey_Current_Key;                             // 0x0430(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputActionKeyMapping                 Sprint_Current_Key;                                // 0x0458(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputAxisKeyMapping                   ForwardKeyAxis;                                    // 0x0480(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputAxisKeyMapping                   BackwardKeyAxis;                                   // 0x04A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputAxisKeyMapping                   LeftKeyAxis;                                       // 0x04D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputAxisKeyMapping                   RightKeyAxis;                                      // 0x04F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UpdateSens(float InValue);
	void Update_Widget(double Field_Of_Vision);
	class FText SniperSensSliderValue();
	void Sniper_Sens_Updateinator(float InValue);
	void SetCheckbox();
	class FText SensSliderValue();
	float SensSliderPlacement();
	void Save_Hitmarker_Settings();
	void Save_game(double Field_Of_Vision, double Mouse_sens, double Snipersens, double BlunderPistolSens, bool Kill_Confirmed_Widget_0, const class FString& Hitmarker_Size_0, const class FString& Hitmarker_Type_0, bool Lumin_0);
	class FText PistolBussSensSliderValue();
	void Pistol_Buss_Updateinator(float InValue);
	void Load_game(double* Field_Of_Vision, double* Mouse_sens, double* Sniper_Sens_0, double* BlunderPistolSens, bool* Kill_Confirmed_Widget_0, bool* Lumin_0, class FString* Hitmarker_Size_0, class FString* Hitmarker_Type_0);
	class FText GetText_2();
	class FText GetText_1();
	class FText GetText_0();
	ECheckBoxState GetCheckedState_0();
	void Get_SniperSensSlider_Value_0(float InValue);
	void ExecuteUbergraph_KeybindMenu(int32 EntryPoint);
	void Construct();
	void BndEvt__KeybindMenu_KeySelectorSwitchKey_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelectorEmote_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelectorBlunderbomb_K2Node_ComponentBoundEvent_10_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelecterSprint_K2Node_ComponentBoundEvent_2_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelecterRight_K2Node_ComponentBoundEvent_6_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelecterLeft_K2Node_ComponentBoundEvent_5_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelecterForward_K2Node_ComponentBoundEvent_4_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelecterBannana_K2Node_ComponentBoundEvent_8_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeySelecterBackward_K2Node_ComponentBoundEvent_3_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_KeyInteractBannana_K2Node_ComponentBoundEvent_9_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__KeybindMenu_ApplyButton_1_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KeybindMenu_C">();
	}
	static class UKeybindMenu_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeybindMenu_C>();
	}
};
static_assert(alignof(UKeybindMenu_C) == 0x000008, "Wrong alignment on UKeybindMenu_C");
static_assert(sizeof(UKeybindMenu_C) == 0x000520, "Wrong size on UKeybindMenu_C");
static_assert(offsetof(UKeybindMenu_C, UberGraphFrame) == 0x000290, "Member 'UKeybindMenu_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, ApplyButton) == 0x000298, "Member 'UKeybindMenu_C::ApplyButton' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Button_0) == 0x0002A0, "Member 'UKeybindMenu_C::Button_0' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelecterBackward) == 0x0002A8, "Member 'UKeybindMenu_C::KeySelecterBackward' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelecterBannana) == 0x0002B0, "Member 'UKeybindMenu_C::KeySelecterBannana' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelecterForward) == 0x0002B8, "Member 'UKeybindMenu_C::KeySelecterForward' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelecterLeft) == 0x0002C0, "Member 'UKeybindMenu_C::KeySelecterLeft' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelecterRight) == 0x0002C8, "Member 'UKeybindMenu_C::KeySelecterRight' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelecterSprint) == 0x0002D0, "Member 'UKeybindMenu_C::KeySelecterSprint' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelectorBlunderbomb) == 0x0002D8, "Member 'UKeybindMenu_C::KeySelectorBlunderbomb' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelectorEmote) == 0x0002E0, "Member 'UKeybindMenu_C::KeySelectorEmote' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelectorInteract) == 0x0002E8, "Member 'UKeybindMenu_C::KeySelectorInteract' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, KeySelectorSwitchKey) == 0x0002F0, "Member 'UKeybindMenu_C::KeySelectorSwitchKey' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, ResetBinds) == 0x0002F8, "Member 'UKeybindMenu_C::ResetBinds' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Char_REF) == 0x000300, "Member 'UKeybindMenu_C::Char_REF' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, BFOV) == 0x000308, "Member 'UKeybindMenu_C::BFOV' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Sens2) == 0x000310, "Member 'UKeybindMenu_C::Sens2' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Char_REF_0) == 0x000318, "Member 'UKeybindMenu_C::Char_REF_0' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, SaverSubClass) == 0x000320, "Member 'UKeybindMenu_C::SaverSubClass' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Game_save1) == 0x000328, "Member 'UKeybindMenu_C::Game_save1' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, SaveOptions) == 0x000338, "Member 'UKeybindMenu_C::SaveOptions' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Load_Settings) == 0x000340, "Member 'UKeybindMenu_C::Load_Settings' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Sens) == 0x000350, "Member 'UKeybindMenu_C::Sens' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Sniper_Sens) == 0x000354, "Member 'UKeybindMenu_C::Sniper_Sens' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Kill_Confirmed_Widget) == 0x000358, "Member 'UKeybindMenu_C::Kill_Confirmed_Widget' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Hitmarker_Size) == 0x000360, "Member 'UKeybindMenu_C::Hitmarker_Size' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Hitmarker_Type) == 0x000370, "Member 'UKeybindMenu_C::Hitmarker_Type' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Lumin) == 0x000380, "Member 'UKeybindMenu_C::Lumin' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Blunder_Pistol_Sens) == 0x000388, "Member 'UKeybindMenu_C::Blunder_Pistol_Sens' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Bannana_Current_Key) == 0x000390, "Member 'UKeybindMenu_C::Bannana_Current_Key' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Interact_Current_Key) == 0x0003B8, "Member 'UKeybindMenu_C::Interact_Current_Key' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Blunderbomb_Current_Key) == 0x0003E0, "Member 'UKeybindMenu_C::Blunderbomb_Current_Key' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Emote_Current_Key) == 0x000408, "Member 'UKeybindMenu_C::Emote_Current_Key' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, SwitchKey_Current_Key) == 0x000430, "Member 'UKeybindMenu_C::SwitchKey_Current_Key' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, Sprint_Current_Key) == 0x000458, "Member 'UKeybindMenu_C::Sprint_Current_Key' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, ForwardKeyAxis) == 0x000480, "Member 'UKeybindMenu_C::ForwardKeyAxis' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, BackwardKeyAxis) == 0x0004A8, "Member 'UKeybindMenu_C::BackwardKeyAxis' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, LeftKeyAxis) == 0x0004D0, "Member 'UKeybindMenu_C::LeftKeyAxis' has a wrong offset!");
static_assert(offsetof(UKeybindMenu_C, RightKeyAxis) == 0x0004F8, "Member 'UKeybindMenu_C::RightKeyAxis' has a wrong offset!");

}

