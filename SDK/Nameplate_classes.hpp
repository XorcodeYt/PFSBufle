#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Nameplate

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Nameplate.Nameplate_C
// 0x0090 (0x0320 - 0x0290)
class UNameplate_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Name_0;                                            // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock;                                         // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ATrainGusPlayer_C*                      PlayerRef;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Player_name;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   NoDisplay;                                         // 0x02C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	ESlateVisibility                              Widget_Visibility;                                 // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameToSet;                                         // 0x02E8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Title;                                             // 0x0300(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         Team;                                              // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Same_team;                                         // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	ESlateVisibility VisibilityFunction();
	class FText TextFunction();
	class FText GetText_0();
	struct FSlateColor Get_Name_ColorAndOpacity_0();
	void ExecuteUbergraph_Nameplate(int32 EntryPoint);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Nameplate_C">();
	}
	static class UNameplate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNameplate_C>();
	}
};
static_assert(alignof(UNameplate_C) == 0x000008, "Wrong alignment on UNameplate_C");
static_assert(sizeof(UNameplate_C) == 0x000320, "Wrong size on UNameplate_C");
static_assert(offsetof(UNameplate_C, UberGraphFrame) == 0x000290, "Member 'UNameplate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNameplate_C, CanvasPanel_0) == 0x000298, "Member 'UNameplate_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UNameplate_C, Name_0) == 0x0002A0, "Member 'UNameplate_C::Name_0' has a wrong offset!");
static_assert(offsetof(UNameplate_C, TextBlock) == 0x0002A8, "Member 'UNameplate_C::TextBlock' has a wrong offset!");
static_assert(offsetof(UNameplate_C, PlayerRef) == 0x0002B0, "Member 'UNameplate_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(UNameplate_C, Player_name) == 0x0002B8, "Member 'UNameplate_C::Player_name' has a wrong offset!");
static_assert(offsetof(UNameplate_C, NoDisplay) == 0x0002C8, "Member 'UNameplate_C::NoDisplay' has a wrong offset!");
static_assert(offsetof(UNameplate_C, Widget_Visibility) == 0x0002E0, "Member 'UNameplate_C::Widget_Visibility' has a wrong offset!");
static_assert(offsetof(UNameplate_C, NameToSet) == 0x0002E8, "Member 'UNameplate_C::NameToSet' has a wrong offset!");
static_assert(offsetof(UNameplate_C, Title) == 0x000300, "Member 'UNameplate_C::Title' has a wrong offset!");
static_assert(offsetof(UNameplate_C, Team) == 0x000318, "Member 'UNameplate_C::Team' has a wrong offset!");
static_assert(offsetof(UNameplate_C, Same_team) == 0x00031C, "Member 'UNameplate_C::Same_team' has a wrong offset!");

}

