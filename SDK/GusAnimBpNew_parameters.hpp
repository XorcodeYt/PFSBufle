#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GusAnimBpNew

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GusAnimBpNew.GusAnimBpNew_C.OnNewFunction_0
// 0x0020 (0x0020 - 0x0000)
struct GusAnimBpNew_C_OnNewFunction_0 final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(GusAnimBpNew_C_OnNewFunction_0) == 0x000008, "Wrong alignment on GusAnimBpNew_C_OnNewFunction_0");
static_assert(sizeof(GusAnimBpNew_C_OnNewFunction_0) == 0x000020, "Wrong size on GusAnimBpNew_C_OnNewFunction_0");
static_assert(offsetof(GusAnimBpNew_C_OnNewFunction_0, Context) == 0x000000, "Member 'GusAnimBpNew_C_OnNewFunction_0::Context' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_OnNewFunction_0, Node) == 0x000010, "Member 'GusAnimBpNew_C_OnNewFunction_0::Node' has a wrong offset!");

// Function GusAnimBpNew.GusAnimBpNew_C.ExecuteUbergraph_GusAnimBpNew
// 0x01D0 (0x01D0 - 0x0000)
struct GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGusPlayer_C*                           K2Node_DynamicCast_AsGus_Player;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0060)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0080(0x0060)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x00E0(0x0060)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x0140(0x0060)(IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CA[0x2];                                      // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew) == 0x000010, "Wrong alignment on GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew");
static_assert(sizeof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew) == 0x0001D0, "Wrong size on GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, EntryPoint) == 0x000000, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::EntryPoint' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, K2Node_DynamicCast_AsGus_Player) == 0x000010, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::K2Node_DynamicCast_AsGus_Player' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000080, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x0000E0, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x000140, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x0001A0, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001A8, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_GetMovementComponent_ReturnValue) == 0x0001B0, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_IsFalling_ReturnValue) == 0x0001B8, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_VSize_ReturnValue) == 0x0001C0, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0001C8, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0001C9, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew, K2Node_Event_DeltaTimeX) == 0x0001CC, "Member 'GusAnimBpNew_C_ExecuteUbergraph_GusAnimBpNew::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function GusAnimBpNew.GusAnimBpNew_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct GusAnimBpNew_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GusAnimBpNew_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on GusAnimBpNew_C_BlueprintUpdateAnimation");
static_assert(sizeof(GusAnimBpNew_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on GusAnimBpNew_C_BlueprintUpdateAnimation");
static_assert(offsetof(GusAnimBpNew_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'GusAnimBpNew_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function GusAnimBpNew.GusAnimBpNew_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct GusAnimBpNew_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(GusAnimBpNew_C_AnimGraph) == 0x000008, "Wrong alignment on GusAnimBpNew_C_AnimGraph");
static_assert(sizeof(GusAnimBpNew_C_AnimGraph) == 0x000010, "Wrong size on GusAnimBpNew_C_AnimGraph");
static_assert(offsetof(GusAnimBpNew_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'GusAnimBpNew_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

