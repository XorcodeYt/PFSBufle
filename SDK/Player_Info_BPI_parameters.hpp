#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Player_Info_BPI

#include "Basic.hpp"


namespace SDK::Params
{

// Function Player_Info_BPI.Player_Info_BPI_C.VoteUpdate
// 0x0008 (0x0008 - 0x0000)
struct Player_Info_BPI_C_VoteUpdate final
{
public:
	int32                                         Ay;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ny;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Player_Info_BPI_C_VoteUpdate) == 0x000004, "Wrong alignment on Player_Info_BPI_C_VoteUpdate");
static_assert(sizeof(Player_Info_BPI_C_VoteUpdate) == 0x000008, "Wrong size on Player_Info_BPI_C_VoteUpdate");
static_assert(offsetof(Player_Info_BPI_C_VoteUpdate, Ay) == 0x000000, "Member 'Player_Info_BPI_C_VoteUpdate::Ay' has a wrong offset!");
static_assert(offsetof(Player_Info_BPI_C_VoteUpdate, Ny) == 0x000004, "Member 'Player_Info_BPI_C_VoteUpdate::Ny' has a wrong offset!");

// Function Player_Info_BPI.Player_Info_BPI_C.SomeoneVoted
// 0x0028 (0x0028 - 0x0000)
struct Player_Info_BPI_C_SomeoneVoted final
{
public:
	class FText                                   PersonWhoVoted;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          TheirVote;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBP_C*                       Player_State;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Player_Info_BPI_C_SomeoneVoted) == 0x000008, "Wrong alignment on Player_Info_BPI_C_SomeoneVoted");
static_assert(sizeof(Player_Info_BPI_C_SomeoneVoted) == 0x000028, "Wrong size on Player_Info_BPI_C_SomeoneVoted");
static_assert(offsetof(Player_Info_BPI_C_SomeoneVoted, PersonWhoVoted) == 0x000000, "Member 'Player_Info_BPI_C_SomeoneVoted::PersonWhoVoted' has a wrong offset!");
static_assert(offsetof(Player_Info_BPI_C_SomeoneVoted, TheirVote) == 0x000018, "Member 'Player_Info_BPI_C_SomeoneVoted::TheirVote' has a wrong offset!");
static_assert(offsetof(Player_Info_BPI_C_SomeoneVoted, Player_State) == 0x000020, "Member 'Player_Info_BPI_C_SomeoneVoted::Player_State' has a wrong offset!");

// Function Player_Info_BPI.Player_Info_BPI_C.Kickfart
// 0x0048 (0x0048 - 0x0000)
struct Player_Info_BPI_C_Kickfart final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Kick_;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ThoseWhoKnow;                                      // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(Player_Info_BPI_C_Kickfart) == 0x000008, "Wrong alignment on Player_Info_BPI_C_Kickfart");
static_assert(sizeof(Player_Info_BPI_C_Kickfart) == 0x000048, "Wrong size on Player_Info_BPI_C_Kickfart");
static_assert(offsetof(Player_Info_BPI_C_Kickfart, PlayerName) == 0x000000, "Member 'Player_Info_BPI_C_Kickfart::PlayerName' has a wrong offset!");
static_assert(offsetof(Player_Info_BPI_C_Kickfart, Kick_) == 0x000010, "Member 'Player_Info_BPI_C_Kickfart::Kick_' has a wrong offset!");
static_assert(offsetof(Player_Info_BPI_C_Kickfart, Text) == 0x000018, "Member 'Player_Info_BPI_C_Kickfart::Text' has a wrong offset!");
static_assert(offsetof(Player_Info_BPI_C_Kickfart, ThoseWhoKnow) == 0x000030, "Member 'Player_Info_BPI_C_Kickfart::ThoseWhoKnow' has a wrong offset!");

// Function Player_Info_BPI.Player_Info_BPI_C.Just Possesed Pawn
// 0x0008 (0x0008 - 0x0000)
struct Player_Info_BPI_C_Just_Possesed_Pawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Player_Info_BPI_C_Just_Possesed_Pawn) == 0x000008, "Wrong alignment on Player_Info_BPI_C_Just_Possesed_Pawn");
static_assert(sizeof(Player_Info_BPI_C_Just_Possesed_Pawn) == 0x000008, "Wrong size on Player_Info_BPI_C_Just_Possesed_Pawn");
static_assert(offsetof(Player_Info_BPI_C_Just_Possesed_Pawn, Pawn) == 0x000000, "Member 'Player_Info_BPI_C_Just_Possesed_Pawn::Pawn' has a wrong offset!");

}

