#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Scoreboard

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Scoreboard.Scoreboard_C
// 0x0048 (0x02D8 - 0x0290)
class UScoreboard_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_1;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_0;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsOwner_;                                          // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULeaderboard_spot_C*>            ScoreboardRowArray;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<int32>                                 Kill_Count_Array;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         IndexWidthManValue;                                // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Authority_;                                        // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Hold_it;                                           // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Scoreboard(int32 EntryPoint);
	void Destruct();
	void Construct();
	void Add_player();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Scoreboard_C">();
	}
	static class UScoreboard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreboard_C>();
	}
};
static_assert(alignof(UScoreboard_C) == 0x000008, "Wrong alignment on UScoreboard_C");
static_assert(sizeof(UScoreboard_C) == 0x0002D8, "Wrong size on UScoreboard_C");
static_assert(offsetof(UScoreboard_C, UberGraphFrame) == 0x000290, "Member 'UScoreboard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, Image_1) == 0x000298, "Member 'UScoreboard_C::Image_1' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, ScrollBox_0) == 0x0002A0, "Member 'UScoreboard_C::ScrollBox_0' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, IsOwner_) == 0x0002A8, "Member 'UScoreboard_C::IsOwner_' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, ScoreboardRowArray) == 0x0002B0, "Member 'UScoreboard_C::ScoreboardRowArray' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, Kill_Count_Array) == 0x0002C0, "Member 'UScoreboard_C::Kill_Count_Array' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, IndexWidthManValue) == 0x0002D0, "Member 'UScoreboard_C::IndexWidthManValue' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, Authority_) == 0x0002D4, "Member 'UScoreboard_C::Authority_' has a wrong offset!");
static_assert(offsetof(UScoreboard_C, Hold_it) == 0x0002D5, "Member 'UScoreboard_C::Hold_it' has a wrong offset!");

}

