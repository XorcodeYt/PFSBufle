#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SwordThinger

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SwordThinger.SwordThinger_C.OnSuccess_7DA1DC8241B25E7952F2F99451222744
// 0x0010 (0x0010 - 0x0000)
struct SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744 final
{
public:
	class FName                                   WrittenAchievementName;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrittenProgress;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrittenUserTag;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744) == 0x000004, "Wrong alignment on SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744");
static_assert(sizeof(SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744) == 0x000010, "Wrong size on SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744");
static_assert(offsetof(SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744, WrittenAchievementName) == 0x000000, "Member 'SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744::WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744, WrittenProgress) == 0x000008, "Member 'SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744::WrittenProgress' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744, WrittenUserTag) == 0x00000C, "Member 'SwordThinger_C_OnSuccess_7DA1DC8241B25E7952F2F99451222744::WrittenUserTag' has a wrong offset!");

// Function SwordThinger.SwordThinger_C.OnFailure_7DA1DC8241B25E7952F2F99451222744
// 0x0010 (0x0010 - 0x0000)
struct SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744 final
{
public:
	class FName                                   WrittenAchievementName;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrittenProgress;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrittenUserTag;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744) == 0x000004, "Wrong alignment on SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744");
static_assert(sizeof(SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744) == 0x000010, "Wrong size on SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744");
static_assert(offsetof(SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744, WrittenAchievementName) == 0x000000, "Member 'SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744::WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744, WrittenProgress) == 0x000008, "Member 'SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744::WrittenProgress' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744, WrittenUserTag) == 0x00000C, "Member 'SwordThinger_C_OnFailure_7DA1DC8241B25E7952F2F99451222744::WrittenUserTag' has a wrong offset!");

// Function SwordThinger.SwordThinger_C.ExecuteUbergraph_SwordThinger
// 0x01B0 (0x01B0 - 0x0000)
struct SwordThinger_C_ExecuteUbergraph_SwordThinger final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_WrittenAchievementName_1;       // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WrittenProgress_1;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WrittenUserTag_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)> K2Node_CreateDelegate_OutputDelegate_2; // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_WrittenAchievementName;         // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WrittenProgress;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WrittenUserTag;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)> K2Node_CreateDelegate_OutputDelegate_3; // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0098(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ATrainGusPlayer_C*                      K2Node_DynamicCast_AsTrain_Gus_Player;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAchievementWriteCallbackProxy*         CallFunc_WriteAchievementProgress_ReturnValue;     // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAchievementQueryCallbackProxy*         CallFunc_CacheAchievements_ReturnValue;            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwordThinger_C_ExecuteUbergraph_SwordThinger) == 0x000008, "Wrong alignment on SwordThinger_C_ExecuteUbergraph_SwordThinger");
static_assert(sizeof(SwordThinger_C_ExecuteUbergraph_SwordThinger) == 0x0001B0, "Wrong size on SwordThinger_C_ExecuteUbergraph_SwordThinger");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, EntryPoint) == 0x000000, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::EntryPoint' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CustomEvent_WrittenAchievementName_1) == 0x000024, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CustomEvent_WrittenAchievementName_1' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CustomEvent_WrittenProgress_1) == 0x00002C, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CustomEvent_WrittenProgress_1' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CustomEvent_WrittenUserTag_1) == 0x000030, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CustomEvent_WrittenUserTag_1' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CreateDelegate_OutputDelegate_2) == 0x000034, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CustomEvent_WrittenAchievementName) == 0x000044, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CustomEvent_WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CustomEvent_WrittenProgress) == 0x00004C, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CustomEvent_WrittenProgress' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CustomEvent_WrittenUserTag) == 0x000050, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CustomEvent_WrittenUserTag' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_CreateDelegate_OutputDelegate_3) == 0x000054, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, Temp_int_Variable) == 0x000064, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, Temp_real_Variable) == 0x000068, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, Temp_name_Variable) == 0x00006C, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000078, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_ComponentBoundEvent_OtherActor) == 0x000080, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_ComponentBoundEvent_OtherComp) == 0x000088, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000090, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_ComponentBoundEvent_bFromSweep) == 0x000094, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_ComponentBoundEvent_SweepResult) == 0x000098, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_DynamicCast_AsTrain_Gus_Player) == 0x000180, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_DynamicCast_AsTrain_Gus_Player' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, CallFunc_GetPlayerController_ReturnValue) == 0x000190, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, CallFunc_WriteAchievementProgress_ReturnValue) == 0x000198, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::CallFunc_WriteAchievementProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, CallFunc_CacheAchievements_ReturnValue) == 0x0001A0, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::CallFunc_CacheAchievements_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, CallFunc_IsValid_ReturnValue) == 0x0001A8, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_ExecuteUbergraph_SwordThinger, CallFunc_IsValid_ReturnValue_1) == 0x0001A9, "Member 'SwordThinger_C_ExecuteUbergraph_SwordThinger::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function SwordThinger.SwordThinger_C.BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'SwordThinger_C_BndEvt__SwordThinger_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

}

