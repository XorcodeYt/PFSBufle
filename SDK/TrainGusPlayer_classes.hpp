#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TrainGusPlayer

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "AdvancedSessions_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "IsOverlapping_Enum_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TrainGusPlayer.TrainGusPlayer_C
// 0x0E00 (0x1400 - 0x0600)
class ATrainGusPlayer_C final : public ACharacter
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Cannon_wielder;                                    // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HandcannonModel;                                   // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FiringParticles4;                                  // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HandCannonRef;                                     // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cannonball_STKM;                                   // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HandCannon_STKM;                                   // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BucketHeadHat;                                     // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HeisenGus;                                         // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CheeseHat;                                         // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeksPhysGunStaticMesh;                             // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint10;                         // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint4;                          // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint5;                          // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint6;                          // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint9;                          // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint2;                          // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint8;                          // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint3;                          // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Blunderbomb_spawn;                                 // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint1;                          // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BlunderBussHitscanPoint7;                          // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SwordBlockBox;                                     // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Pivot;                                             // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   sword;                                             // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThirdPersonLumenCamera;                            // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FpsGusArms;                                        // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonLuminCamera;                            // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThirdPersonCamera;                                 // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Third_Person_Pivot;                                // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blunderbuss1;                                      // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Flag_Icon_Red_;                                    // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Flag_Icon_Blue;                                    // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   flagpole;                                          // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   eyeofreachmodel2;                                  // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Banana_eater;                                      // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gusnana;                                           // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        flintlockshot_Cue;                                 // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gusderbomb;                                        // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlintlockGus;                                      // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       NameTagWidget;                                     // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       NameCollision;                                     // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Damage_facer;                                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        windsfx_Cue;                                       // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        StompSpawner;                                      // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        emergewater_Cue;                                   // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        submergewater_Cue;                                 // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlunderBomb;                                       // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FiringParticles3;                                  // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FiringParticles2;                                  // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FiringParticles1;                                  // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bannana_STKM;                                      // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blunderbuss_STKM;                                  // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Eor_STKM;                                          // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Flintlock_STKM;                                    // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FiringParticles;                                   // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BananaHand;                                        // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlunderFire;                                       // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EoRFire;                                           // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlintLockFire;                                     // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SwordDash_spawner;                                 // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 handSword;                                         // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 low_poly_hand_grip_idleanim2;                      // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blunderbuss;                                       // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeksMask;                                          // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Blunderhand;                                       // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 low_poly_hand_grip_idleanim1;                      // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   eyeofreachmodel1;                                  // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FlintlockSkeletonfbx1;                             // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 low_poly_hand_grip_idleanim;                       // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Circle_Widget_Alpha_B2317F0243061F163938F39A1FDBE151; // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Circle_Widget__Direction_B2317F0243061F163938F39A1FDBE151; // 0x0854(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_855[0x3];                                      // 0x0855(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Circle_Widget;                                     // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_Homer_5817E25544E8792FA5B29DBBECA99D61; // 0x0860(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_5817E25544E8792FA5B29DBBECA99D61; // 0x0864(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_865[0x3];                                      // 0x0865(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_Homer_0CB002C34FE6FB782C3FD78E30248C7B; // 0x0870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_0CB002C34FE6FB782C3FD78E30248C7B; // 0x0874(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_875[0x3];                                      // 0x0875(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Land_Recoil_Alpha_AFDF09924B56A3D60E4812AE779614D4; // 0x0880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Land_Recoil__Direction_AFDF09924B56A3D60E4812AE779614D4; // 0x0884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_885[0x3];                                      // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Land_Recoil;                                       // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sprint_FOV_Alpha_8BA50E124DCB46FE356651BC0E3D352F; // 0x0890(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Sprint_FOV__Direction_8BA50E124DCB46FE356651BC0E3D352F; // 0x0894(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_895[0x3];                                      // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Sprint_FOV;                                        // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_NewTrack_0_418BF244487DE8369C424E8895E4099B; // 0x08A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_418BF244487DE8369C424E8895E4099B; // 0x08A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A5[0x3];                                      // 0x08A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Homer_C553A1E24D845FDA62CE21A81C9BE3E8; // 0x08B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_C553A1E24D845FDA62CE21A81C9BE3E8; // 0x08B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B5[0x3];                                      // 0x08B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOV_Transition_Homer_BCB7DB86457C6DFDDE66869CDB3DD657; // 0x08C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FOV_Transition__Direction_BCB7DB86457C6DFDDE66869CDB3DD657; // 0x08C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C5[0x3];                                      // 0x08C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FOV_Transition;                                    // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_6F2B174846F14CC2A1EFCEB9587720B4; // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_6F2B174846F14CC2A1EFCEB9587720B4; // 0x08D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D5[0x3];                                      // 0x08D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turn_Rate_Gamepad;                                 // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnUseItem;                                         // 0x08E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Speed;                                             // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxWalkSpeed;                                      // 0x0900(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRunSpeed;                                       // 0x0908(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRunning_;                                        // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x7];                                      // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FlintlockTRAIN_C*                   FlintlockEquipped;                                 // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGusAnimBpNewer_C*                      GusanimBP;                                         // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0930(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Equipped_weapon;                                   // 0x0948(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanFire_;                                          // 0x094C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Health;                                    // 0x0950(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invulnarable;                                      // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EoR_aiming_;                                       // 0x0959(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aimdoing;                                          // 0x095A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RealFlintlockAim_;                                 // 0x095B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThrowingBlunderbomb_;                              // 0x095C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHatMenu_C*                             HatRefrence;                                       // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EquippedWeapon2;                                   // 0x0968(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Second_slot_;                                      // 0x096C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_weapons;                                   // 0x096D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Second_swing_;                                     // 0x096E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96F[0x1];                                      // 0x096F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CutlassSwings;                                     // 0x0970(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AfterComboDelay;                                   // 0x0974(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_975[0x3];                                      // 0x0975(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Stunspeed;                                         // 0x0978(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSwung_;                                         // 0x0980(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_981[0x3];                                      // 0x0981(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HatNumber;                                         // 0x0984(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Left_clicking_;                                    // 0x0988(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADash_hit_C*                            DashRef;                                           // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          right_clicking_;                                   // 0x0998(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sens;                                              // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sens2;                                             // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOptionsMenuNew_C*                      MenuRef;                                           // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dashing_;                                          // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B9[0x7];                                      // 0x09B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Uhitmarker_C*                           hitmarker;                                         // 0x09C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kills;                                             // 0x09C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_9CC[0x4];                                      // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object_ref;                                        // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const class FString& Killer, const class FString& Killed)> KillFeed; // 0x09D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUI_KillFeedWidget_C*                   KillFeedVar;                                       // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flintlock_ammo;                                    // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Eye_of_reach_ammo;                                 // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Blunderbuss_Ammo;                                  // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interacting;                                       // 0x09FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0A00(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Has_Blunderbomb_Equipped;                          // 0x0A18(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              WaterDoing;                                        // 0x0A20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              StopWaterdoing;                                    // 0x0A30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              FlintLockHitmarkerDis;                             // 0x0A40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UHUDgus_C*                              HudRef;                                            // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FlintlockAmmo2;                                    // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Eye_of_reach_ammo2;                                // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Blunderbuss_Ammo2;                                 // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveOptions_C*                         SaveOptions;                                       // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Vision_of_field;                                   // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              Save_game;                                         // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Options_Saving;                                    // 0x0A80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              BringUpInteract;                                   // 0x0A90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              StopInteract;                                      // 0x0AA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FBlueprintSessionResult                NewVar_0;                                          // 0x0AB0(0x0108)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              FireFlintlock1;                                    // 0x0BB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Team;                                              // 0x0BC8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Plus1;                                             // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          brev;                                              // 0x0BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Damage_Causer;                                     // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Instigated_By;                                     // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Canfire__slot_2;                                   // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swap_delay;                                        // 0x0BE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Skip_swap_delay;                                   // 0x0BEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reload;                                            // 0x0BEB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BEC[0x4];                                      // 0x0BEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              TeamSwitcher;                                      // 0x0BF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              TeamBlue;                                          // 0x0C00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              TeamRed;                                           // 0x0C10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Hat_Apply;                                         // 0x0C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              MeksHat;                                           // 0x0C30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              NoHat;                                             // 0x0C40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bannana;                                           // 0x0C50(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C51[0x3];                                      // 0x0C51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Bannana_Amount;                                    // 0x0C54(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intensity;                                         // 0x0C58(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Fire_Ableing_slot_1;                               // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C61[0x7];                                      // 0x0C61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Flintlock;                                         // 0x0C68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AFlintlock_Projectile_Client_C*         FlintlockRef;                                      // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UScoreboard_C*                          Scoreboard;                                        // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0C88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Deaths;                                            // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprinting;                                         // 0x0C9C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          W_holding;                                         // 0x0C9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ive_Nowt_Equipped;                                 // 0x0C9E(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Gun_Equipped;                                      // 0x0C9F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Knockback;                                         // 0x0CA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UGusArmsAnimBP_C*                       GusArmsRef;                                        // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EquipedFlintlock;                                  // 0x0CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlintlockFired;                                    // 0x0CB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EorFired;                                          // 0x0CBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlunderBussFired;                                  // 0x0CBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Eating_Bannana;                                    // 0x0CBC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Me_got_bannana;                                    // 0x0CBD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Viewmodel_;                                        // 0x0CBE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBF[0x1];                                      // 0x0CBF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Damage_Indecator;                                  // 0x0CC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              BannanaED;                                         // 0x0CD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Give_me_a_kill_ping;                               // 0x0CE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Just_touched_someone;                              // 0x0CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF1[0x7];                                      // 0x0CF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATrainGusPlayer_C*                      Gusref;                                            // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Give_me_a_doboing;                                 // 0x0D00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          He_going_fast;                                     // 0x0D10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D11[0x7];                                      // 0x0D11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                chatBoxUI;                                         // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      Last_Hit_By;                                       // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         My_team;                                           // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2C[0x4];                                      // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   My_Name;                                           // 0x0D30(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   Last_Hit_By_Name;                                  // 0x0D48(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              Give_me_a_kill_message;                            // 0x0D60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Get_enemy_team;                                    // 0x0D70(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead_;                                           // 0x0D74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D75[0x3];                                      // 0x0D75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        client_health;                                     // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          I_just_switched;                                   // 0x0D80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StompGPS;                                          // 0x0D81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D82[0x6];                                      // 0x0D82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   I_Killed_Name;                                     // 0x0D88(0x0018)(Edit, BlueprintVisible, Net)
	struct FRotator                               Shotted_Rotation_EOR;                              // 0x0DA0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ShottedLocation;                                   // 0x0DB8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EIsOverlapping_Enum                           OverlapEnum;                                       // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD1[0x7];                                      // 0x0DD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Player_Overlapping;                                // 0x0DD8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class FString                                 Player_Name_Ref;                                   // 0x0DE8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	class FString                                 Player_name;                                       // 0x0DF8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash)
	ESlateVisibility                              WidgetVisibility;                                  // 0x0E08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Widget_Visibility_Ref;                             // 0x0E09(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E0A[0x6];                                      // 0x0E0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Hit_Actor;                                         // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_hit_block;                                     // 0x0E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_gentlemen;                                     // 0x0E19(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1A[0x6];                                      // 0x0E1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlayerTitle;                                       // 0x0E20(0x0018)(Edit, BlueprintVisible, Net, ExposeOnSpawn)
	TMulticastInlineDelegate<void()>              TitleBringer;                                      // 0x0E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 My_object_ref;                                     // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead_;                                             // 0x0E50(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lock_Input_;                                       // 0x0E51(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E52[0x6];                                      // 0x0E52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Zero_float;                                        // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATrainGusPlayer_C*>              Every_player;                                      // 0x0E60(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UObject*                                Self_0;                                            // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATrainGusPlayer_C*>              List_of_Players;                                   // 0x0E78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ATrainGusPlayer_C*>              Everybody;                                         // 0x0E88(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          FlintlockEquppiedRightnow;                         // 0x0E98(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlintlockAimer;                                    // 0x0E99(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Holding_Weapon_;                                   // 0x0E9A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Eye_of_Reach_Equipped_rightnow;                    // 0x0E9B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9C[0x4];                                      // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Interact_key;                                      // 0x0EA0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                Force;                                             // 0x0EB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InTheDo;                                           // 0x0ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED1[0x7];                                      // 0x0ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Your_too_high;                                     // 0x0ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Dampener;                                          // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE9[0x7];                                      // 0x0EE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Yea_thats_better;                                  // 0x0EF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Twohanded;                                         // 0x0F00(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EOR_aimer;                                         // 0x0F01(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F02[0x6];                                      // 0x0F02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Am_i_controlled_;                                  // 0x0F08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Condition;                                         // 0x0F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F19[0x7];                                      // 0x0F19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewVar_1;                                          // 0x0F20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                Blunderbusspoint1L;                                // 0x0F30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint1R;                                // 0x0F48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint2L;                                // 0x0F60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint2R;                                // 0x0F78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint3L;                                // 0x0F90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint3R;                                // 0x0FA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint4L;                                // 0x0FC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint4R;                                // 0x0FD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint5L;                                // 0x0FF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint5R;                                // 0x1008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint6L;                                // 0x1020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint6R;                                // 0x1038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint7L;                                // 0x1050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint7R;                                // 0x1068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint8L;                                // 0x1080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint8R;                                // 0x1098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint9L;                                // 0x10B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint9R;                                // 0x10C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Blunderbusspoint10L;                               // 0x10E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Blunderbusspoint10R;                               // 0x10F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Vector_salamanca;                                  // 0x1110(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1111[0x3];                                     // 0x1111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team_Flag;                                         // 0x1114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          gotblue;                                           // 0x1118(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          gotred;                                            // 0x1119(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111A[0x6];                                     // 0x111A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCTF_Hud_C*                             CTF_HUD_Ref;                                       // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD_BP_C*                              HUD_Ref;                                           // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CTFRedScore;                                       // 0x1130(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CTFBlueScore;                                      // 0x1134(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class APlayerController*                      Controllerref;                                     // 0x1138(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerControllerref;                               // 0x1140(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Cannon_im_using;                                   // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cannon_;                                           // 0x1150(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1151[0x7];                                     // 0x1151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cannon_loadinto_timer;                             // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reloading;                                         // 0x1160(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1161[0x7];                                     // 0x1161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Reload_time;                                       // 0x1168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loaded;                                            // 0x1170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blunderbuss_Equipped_Right_now;                    // 0x1171(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1172[0x6];                                     // 0x1172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGunReload_C*                           GunReloadWidget;                                   // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloadingFlintlock_;                             // 0x1180(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloadingEOR_;                                   // 0x1181(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pressed_X;                                         // 0x1182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloadingBlunderbuss_;                           // 0x1183(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emoting;                                           // 0x1184(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_;                                              // 0x1185(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kill_Confirmed_Widget;                             // 0x1186(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1187[0x1];                                     // 0x1187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         I_Killed_team;                                     // 0x1188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lumin;                                             // 0x118C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          A_key;                                             // 0x118D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Right_Mouse_Button;                                // 0x118E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sword_Equppied;                                    // 0x118F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blocking;                                          // 0x1190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwordSwing1;                                       // 0x1191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwordSwing2;                                       // 0x1192(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1193[0x1];                                     // 0x1193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Swings;                                            // 0x1194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swingamuss_;                                       // 0x1198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Last_swing;                                        // 0x1199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swing_Hit_;                                        // 0x119A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119B[0x5];                                     // 0x119B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_to_Ignore;                                  // 0x11A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          W_doering;                                         // 0x11B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          D_doer;                                            // 0x11B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          S_inating;                                         // 0x11B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Dodge_;                                        // 0x11B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Holding_left_click;                                // 0x11B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dashingteller;                                     // 0x11B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B6[0x2];                                     // 0x11B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dashingtellerfloat;                                // 0x11B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dashinating;                                       // 0x11C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C1[0x7];                                     // 0x11C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Hit_Component;                                     // 0x11C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Hit_Actor_0;                                       // 0x11D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     Out_Hits;                                          // 0x11D8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FHitResult>                     Out_Hits_0;                                        // 0x11E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	class APlayerState*                           Killed_player;                                     // 0x11F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blunder_aiming_;                                   // 0x1200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1201[0x7];                                     // 0x1201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Shotted_Rotation_Flintlock;                        // 0x1208(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Shotted_Location_Flintlock;                        // 0x1220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flinty_Aiming_;                                    // 0x1238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sniper_Aimer_;                                     // 0x1239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123A[0x6];                                     // 0x123A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Shooter_Player_State;                              // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blunder_Aimer;                                     // 0x1248(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1249[0x7];                                     // 0x1249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sensitivity_multiplyer;                            // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sniper_Sens;                                       // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlintBlunderSens;                                  // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Reload_;                                        // 0x1268(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Equip_Doohickey;                                   // 0x1269(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_126A[0x2];                                     // 0x126A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Blunderbomb_Amount;                                // 0x126C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AInteractBannana_Widget_C*              Bannana_Interact;                                  // 0x1270(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Banana_Widget_Activated_;                          // 0x1278(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1279[0x7];                                     // 0x1279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AInteractBlunderbomb_Widget_C*          Blunder_Interact;                                  // 0x1280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Twerk_Emote;                                       // 0x1288(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kicker_Emote;                                      // 0x1289(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_128A[0x2];                                     // 0x128A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Target_Arm_Length;                                 // 0x128C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Aim_;                                          // 0x1290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1291[0x7];                                     // 0x1291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         NamePlateActors;                                   // 0x1298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ANamePlateWidgetActor_C*                MyNamePlateActor;                                  // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Nearby_players;                                    // 0x12B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ATrainGusPlayer_C*, class ANamePlateWidgetActor_C*> PlayerNameList;                   // 0x12C0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         WeaponSkin;                                        // 0x1310(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Invert_X;                                          // 0x1314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_Y;                                          // 0x1315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1316[0x2];                                     // 0x1316(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Invert_XF;                                         // 0x1318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Invert_YF;                                         // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Damage_Causer_0;                                   // 0x1328(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Right_Mousing;                                     // 0x1330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1331[0x3];                                     // 0x1331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Current_Fov;                                       // 0x1334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Eye_of_aiming_fart;                                // 0x1338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flintlock_aiming_fart;                             // 0x1339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blunderbuss_aiming_fart;                           // 0x133A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133B[0x5];                                     // 0x133B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UReticle_C*                             ReticleRef;                                        // 0x1340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Sniper_Current_Timer;                              // 0x1348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Flintlock_Current_Timer;                           // 0x1350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Blunderbuss_Current_Timer;                         // 0x1358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Load_Into_Timer;                                   // 0x1360(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACannon_C*                              As_Cannon;                                         // 0x1368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inside_Cannon_;                                    // 0x1370(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1371[0x7];                                     // 0x1371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACannonFront_Interact_Widget_C*         Cannon_Tip_Widget;                                 // 0x1378(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACannon_Interact_Widget_Actor_C*        Cannon_Widget_;                                    // 0x1380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveAimingFovVar;                                // 0x1388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HandCannonEquipedRightNow;                         // 0x1389(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReloadCannon_;                                     // 0x138A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CannonFired_;                                      // 0x138B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_138C[0x4];                                     // 0x138C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Handcannon_Reload_Timer;                           // 0x1390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         HandCannonAmmo;                                    // 0x1398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139C[0x4];                                     // 0x139C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Real_Rotation;                                     // 0x13A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Temp_Rotation;                                     // 0x13B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_Location;                                     // 0x13D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Death_location;                                    // 0x13E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void WoodInitial();
	void Weapon_Sound_Server(class UObject* Owner_Player_State, class USceneComponent* AttachToComponent, class USoundBase* Sound);
	void Weapon_Sound_Multicast(const TArray<class UObject*>& List_of_Players_0, class UObject* Owner_Player_State, class USceneComponent* AttachToComponent, class USoundBase* Sound);
	void Waterstuff();
	void VoteUpdate(int32 Ay, int32 Ny);
	void UpTeam();
	void UpdateNameServer();
	void Updatenamebro();
	void UpdateKickFart();
	void Update_Health_on_Server();
	void UnSniper_doodads();
	void UnADS_PistolBuss();
	void TraceDown(class AActor* Target, bool* bBlockingHit);
	void TooHighBro();
	void Timeline_4__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Third_person_deactivate_server();
	void The_Sun_Skin();
	void Tell_em_to_bring_out_the_sniper();
	void Tell_em_to_bring_out_the_Guns();
	void Teams();
	void TeamRedEvent();
	void TeamRedDoing();
	void TeamKnower(class APlayerController* OwningPlayer);
	void TeamBlueEvent();
	void TeamBlueDoing();
	void SwordLineTraceClient222();
	void SwordLinetraceclient22();
	void Swordinator_on_Server(const struct FVector& Start, const struct FVector& End, const struct FRotator& Orientation);
	void SwordHUD();
	void SwordDashing(double Launch_Velocity_X, double Launch_Velocity_Y, class ACharacter* Target);
	void SwordBlockerIgnore_Serverness(class UPrimitiveComponent* Target);
	void SwordBlockerIgnore_Multicast(class UPrimitiveComponent* Target);
	void SwordBlockerBlock_Serverness(class UPrimitiveComponent* Target);
	void SwordBlockerBlock_Multicast(class UPrimitiveComponent* Target);
	void Sword_Dodge_Right(double Launch_Velocity_X, double Launch_Velocity_Y, class ACharacter* Target);
	void Sword_Dodge_Left(double Launch_Velocity_X, double Launch_Velocity_Y, class ACharacter* Target);
	void Sword_Dodge_Forward(double Launch_Velocity_X, double Launch_Velocity_Y, class ACharacter* Target);
	void Sword_Dash_Knockback(class ACharacter* Target, double Launch_Velocity_X, double Launch_Velocity_Y, class AActor* DamageCauser);
	void StopInteractDoing();
	void StopFireForSwap2();
	void Stop_Viewbobbing();
	void Stop_sprint();
	void Stop_Reloading_Flintlock_2(bool Condition_0);
	void Stop_Reloading_Flintlock(bool Condition_0);
	void Stop_Reloading_EOR_Server();
	void Stop_Reloading_Cannon_Gus();
	void Stop_Reloading_Blunderbuss_Server();
	void Stop_doing();
	void StompTick();
	void StartSwordStun();
	void StartSprintbobbing();
	void Start_Viewbobbing();
	void Start_sprint();
	void Start_Name_Checking();
	void SprintHUD();
	void Sprint_FOV__UpdateFunc();
	void Sprint_FOV__FinishedFunc();
	void Spawn_it_Server(const struct FVector& Spawn_Transform_Location, class USceneComponent* Target, class APawn* Last_Wielder);
	void SomeoneVoted(const class FText& PersonWhoVoted, bool TheirVote, class APlayerStateBP_C* Player_State);
	void Sniper_aiming_doodads(class APlayerController* OwningPlayer);
	void Skibidi_First_slot();
	void Set_Hat(int32 Selection, class USceneComponent* Meks_Mask);
	void Set_clients_variables(class APlayerController* PlayerControllerref_0, int32 HatNumber_0);
	void ServerRifleBulletSlot2(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* Spawner);
	void ServerRifleBullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* Spawner);
	void ServerNoHave(class USceneComponent* Widget_Ref, int32 Equipped_weapon_0, class ATrainGusPlayer_C* TGusRef);
	void ServerFlintlockBulletSlot2(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* B);
	void ServerFlintlockBullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* Spawner, class UAudioComponent* OwnerAudio);
	void ServerBlunderbussBulletSlot2();
	void ServerBlunderbussBullet(class AActor* Spawner, const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, const struct FVector& Spawn_Transform_Location1, const struct FRotator& Spawn_Transform_Rotation1, const struct FVector& Spawn_Transform_Location2, const struct FRotator& Spawn_Transform_Rotation2, const struct FVector& Spawn_Transform_Location3, const struct FRotator& Spawn_Transform_Rotation3, const struct FVector& Spawn_Transform_Location4, const struct FRotator& Spawn_Transform_Rotation4, const struct FVector& Spawn_Transform_Location5, const struct FRotator& Spawn_Transform_Rotation5, const struct FVector& Spawn_Transform_Location6, const struct FRotator& Spawn_Transform_Rotation6, const struct FVector& Spawn_Transform_Location7, const struct FRotator& Spawn_Transform_Rotation7, const struct FVector& Spawn_Transform_Location8, const struct FRotator& Spawn_Transform_Rotation8, const struct FVector& Spawn_Transform_Location9, const struct FRotator& Spawn_Transform_Rotation9);
	void Server_Weapon_select(class USceneComponent* User_Flintlock, class USceneComponent* User_EOR, class USceneComponent* User_banana, class USceneComponent* Blunderbuss_0, class USceneComponent* User_HandCannon, bool Second_slot__0, int32 Equipped_weapon_0, int32 Equipped_weapon_2);
	void Server_Twerk();
	void Server_Title_Change();
	void Server_Tell_Gamestate_of_change();
	void Server_Nothing_is_eqiupped();
	void Server_Not_holding_Weapon();
	void Server_holding_weapon();
	void Server_hitmarker(class APlayerController* OwningPlayer);
	void Server_Flintlock_Damage(class AActor* Hit_bloke);
	void Server_FIre_Cannon_Sound_Multicast(class USceneComponent* AttachToComponent);
	void Server_Eye_of_reach_sound(class USceneComponent* AttachToComponent);
	void Server_Eor_Damage(class AActor* Hit_bloke);
	void Server_DeEquip_Weapon(class USceneComponent* User_Flintlock, class USceneComponent* User_EOR, class ATrainGusPlayer_C* Player);
	void Server_DeEquip_blunderbomb(class USceneComponent* User_Blunderbomb);
	void Server_DeEquip_aimers();
	void Server_Blunderbuss_Sound(class USceneComponent* AttachToComponent);
	void Server_Blunderbomb_Throw_anim(class USceneComponent* Target);
	void Server_Blunderbomb_AOE(class AActor* DamagedActor, const struct FVector& Spawn_Transform_Location);
	void Server_Blunderbomb_Anim(class USceneComponent* User_Blunderbomb);
	void Server_Blunder_Damage(class AActor* Hit_bloke);
	void Server_Aimer_anims(bool second_slot, int32 Equipped_weapon_0, int32 Equipped_weapon_2);
	void Second_slot_select();
	void Rots(const struct FRotator& NewRotation);
	void Rid_of_menu();
	void Reset_Flintlock2();
	void Reset_flintlock_1();
	void Reset_eor2();
	void Reset_EOR_1();
	void Reset_Blunderbuss_2();
	void Reset_Blunderbuss_1();
	void RepStopSprint();
	void RepStartSprint();
	void RemoveAllHats();
	void Remove_Widgets();
	void Remove_spectate_border();
	void Remove_sniper_widget();
	void Remove_Nameplates();
	void Remove_Ammo_Widget_upon_death();
	void Remove_Aiming_FOV();
	void Reloading_EOR_Server();
	void Reload_Flintlock_Server();
	void Reload_Failed_Sniper();
	void Reload_Checker(bool* NewParam);
	void Reload_Blunder_Server();
	void Reliffer();
	void ReceiveUnpossessed(class AController* OldController);
	void ReceiveTick(float DeltaSeconds);
	void ReceivePossessed(class AController* NewController);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void R_interact_on_server(class ACharacter* Character, class APawn* User);
	void R_doing(class AActor* DamageCauser, const struct FVector& Start, const struct FVector& End);
	void QuitAiming();
	void Quit_loadin_bro();
	void Quit_Eating_Banana();
	void Posess_Spectate(class AActor* Killed_By_ActorRef, class AController* Target, class APlayerController* OwningPlayer, int32 Team_0, int32 Equipped_weapon_0, int32 Equipped_weapon_2, const class FText& Player_Title, int32 CTF_Red_Score, int32 CTF_Blue_Score);
	void PitchServer(class USceneComponent* Target, const struct FRotator& NewRotation);
	void PhysGunHUD();
	void OverlappingCharacterbro();
	void OverlappingCharacter();
	void OptionsSavingDoing();
	void OnSuccess_A35D56AB4B42332750230D9DF29B1D58();
	void OnSuccess_8D5C8136420C7853B0229D9635E6C5B9(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_69F086924E86F140F954BAAC1BE7B0B0(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_4FBC7982404D066302B91EBEF5C8FD87();
	void OnRep_WidgetVisibilityRef();
	void OnRep_Widget_Visibility_Ref();
	void OnRep_Vector_salamanca();
	void OnRep_Twerk_();
	void OnRep_Team();
	void OnRep_Sprinting();
	void OnRep_Second_slot_();
	void OnRep_Rotation();
	void OnRep_Right_Mousing();
	void OnRep_Player_Name_Ref();
	void OnRep_Me_got_bannana();
	void OnRep_Is_Reload_();
	void OnRep_Intensity();
	void OnRep_Has_Blunderbomb_Equipped();
	void OnRep_FlintlockEquppiedrightnow();
	void OnRep_Eye_of_aiming_fart();
	void OnRep_EquippedWeapon2();
	void OnRep_Equipped_weapon();
	void OnRep_Dead_();
	void OnRep_Bannana_Amount();
	void OnLanded(const struct FHitResult& Hit);
	void OnFailure_A35D56AB4B42332750230D9DF29B1D58();
	void OnFailure_8D5C8136420C7853B0229D9635E6C5B9(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_69F086924E86F140F954BAAC1BE7B0B0(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_4FBC7982404D066302B91EBEF5C8FD87();
	void On_Pant(const class FString& Pant);
	void Not_Twohanded();
	void NoHUD();
	void NoHatMulticast(class USceneComponent* MeksHat_0, class USceneComponent* CheeseHat_0, class USceneComponent* Heisengus_Hat, class USceneComponent* BucketHeadHat_0);
	void No_Skin();
	void No_Reloading();
	void No_Hat();
	void New_weapon_Swap();
	void NameTag_Doer(class AActor* ParentActor, class AActor* See_doer);
	void Minus_Bananna_Server(int32 Bannana_Amount_0);
	void MeshPitchMulticast(float Body_Pitch_X__Roll_, class USceneComponent* Target);
	void MekshatServer(class USceneComponent* MeksHat_0, class USceneComponent* Hat);
	void MeksHatMulticast(class USceneComponent* MeksHat_0, class USceneComponent* CheeseHat_0, class USceneComponent* Heisengus_Hat, class USceneComponent* BucketHeadHat_0);
	void Meks_Hat();
	void Meatball();
	void Manyullyn_Skin();
	void Lost_flag_now(const struct FVector& Spawn_Transform_Location);
	void LogOn_ed();
	void Load_into_cannon_client();
	void Load_into_cannon(class UObject* Target, class ATrainGusPlayer_C* User);
	void Left_The_Dampener();
	void Land_Recoil__UpdateFunc();
	void Land_Recoil__FinishedFunc();
	void Killbind_server(class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	void Kill_count(class AActor* Target);
	void Kill_Confirm_on_Server(const class FText& Killed_player_0, class APlayerController* OwningPlayer);
	void Kickfart(const class FString& PlayerName, bool Kick_, const class FText& Text, const class FText& ThoseWhoKnow);
	void Just_Possesed_Pawn(class APawn* Pawn);
	void Ive_Stopped_Sprinting();
	void Interact_Widget_unshower();
	void Interact_Widget_Shower(const struct FVector& Spawn_Transform_Location, class APlayerController* OwningPlayer);
	void Interact_widget_doing();
	void Interact_on_server(class AActor* DamageCauser, const struct FVector& Start, const struct FVector& End, class ATrainGusPlayer_C* User);
	void Interact_Cannon_getter_inner_Shower(const struct FVector& Spawn_Transform_Location, class APlayerController* OwningPlayer);
	void Insta_First_Slot();
	void Input_game_only(class APlayerController* PlayerController);
	void InpAxisEvt_WalkRightAxis_K2Node_InputAxisEvent_10(float AxisValue);
	void InpAxisEvt_WalkLeftAxis_K2Node_InputAxisEvent_9(float AxisValue);
	void InpAxisEvt_WalkForwardAxis_K2Node_InputAxisEvent_4(float AxisValue);
	void InpAxisEvt_WalkBackwardAxis_K2Node_InputAxisEvent_8(float AxisValue);
	void _Left_Mouse_K2Node_InputAxisEvent_7(float AxisValue);
	void _Left_Mouse_K2Node_InputAxisEvent_2(float AxisValue);
	void _Left_Mouse_K2Node_InputAxisEvent_16(float AxisValue);
	void _Left_Gamepad_K2Node_InputAxisEvent_0(float AxisValue);
	void _Left_K2Node_InputAxisEvent_5(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_6(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_3(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_17(float AxisValue);
	void _Down_Gamepad_K2Node_InputAxisEvent_1(float AxisValue);
	void InpActEvt_X_K2Node_InputKeyEvent_35(const struct FKey& Key_0);
	void InpActEvt_W_K2Node_InputKeyEvent_44(const struct FKey& Key_0);
	void InpActEvt_W_K2Node_InputKeyEvent_43(const struct FKey& Key_0);
	void InpActEvt_W_K2Node_InputKeyEvent_27(const struct FKey& Key_0);
	void InpActEvt_W_K2Node_InputKeyEvent_26(const struct FKey& Key_0);
	void InpActEvt_W_K2Node_InputKeyEvent_12(const struct FKey& Key_0);
	void InpActEvt_V_K2Node_InputKeyEvent_39(const struct FKey& Key_0);
	void InpActEvt_V_K2Node_InputKeyEvent_34(const struct FKey& Key_0);
	void InpActEvt_Two_K2Node_InputKeyEvent_6(const struct FKey& Key_0);
	void InpActEvt_Two_K2Node_InputKeyEvent_14(const struct FKey& Key_0);
	void InpActEvt_SwitchKey_K2Node_InputActionEvent_0(const struct FKey& Key_0);
	void InpActEvt_Sprint_K2Node_InputActionEvent_8(const struct FKey& Key_0);
	void InpActEvt_Sprint_K2Node_InputActionEvent_7(const struct FKey& Key_0);
	void InpActEvt_Sprint_K2Node_InputActionEvent_18(const struct FKey& Key_0);
	void InpActEvt_Sprint_K2Node_InputActionEvent_17(const struct FKey& Key_0);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_30(const struct FKey& Key_0);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_13(const struct FKey& Key_0);
	void InpActEvt_ScrollWheel_K2Node_InputActionEvent_3(const struct FKey& Key_0);
	void InpActEvt_S_K2Node_InputKeyEvent_40(const struct FKey& Key_0);
	void InpActEvt_S_K2Node_InputKeyEvent_23(const struct FKey& Key_0);
	void InpActEvt_S_K2Node_InputKeyEvent_22(const struct FKey& Key_0);
	void InpActEvt_S_K2Node_InputKeyEvent_11(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_5(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_4(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_29(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_28(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_21(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_20(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_19(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_18(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_17(const struct FKey& Key_0);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_16(const struct FKey& Key_0);
	void InpActEvt_R_K2Node_InputKeyEvent_2(const struct FKey& Key_0);
	void InpActEvt_R_K2Node_InputKeyEvent_1(const struct FKey& Key_0);
	void InpActEvt_One_K2Node_InputKeyEvent_15(const struct FKey& Key_0);
	void InpActEvt_One_K2Node_InputKeyEvent_0(const struct FKey& Key_0);
	void InpActEvt_N_K2Node_InputKeyEvent_33(const struct FKey& Key_0);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_8(const struct FKey& Key_0);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_7(const struct FKey& Key_0);
	void InpActEvt_K_K2Node_InputKeyEvent_37(const struct FKey& Key_0);
	void InpActEvt_Jump_K2Node_InputActionEvent_14(const struct FKey& Key_0);
	void InpActEvt_Jump_K2Node_InputActionEvent_13(const struct FKey& Key_0);
	void InpActEvt_Interact_key_K2Node_InputActionEvent_5(const struct FKey& Key_0);
	void InpActEvt_Interact_key_K2Node_InputActionEvent_4(const struct FKey& Key_0);
	void InpActEvt_Interact_key_K2Node_InputActionEvent_21(const struct FKey& Key_0);
	void InpActEvt_Interact_key_K2Node_InputActionEvent_20(const struct FKey& Key_0);
	void InpActEvt_Four_K2Node_InputKeyEvent_45(const struct FKey& Key_0);
	void InpActEvt_Five_K2Node_InputKeyEvent_36(const struct FKey& Key_0);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_19(const struct FKey& Key_0);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_16(const struct FKey& Key_0);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_15(const struct FKey& Key_0);
	void InpActEvt_EmoteKey_K2Node_InputActionEvent_1(const struct FKey& Key_0);
	void InpActEvt_E_K2Node_InputKeyEvent_46(const struct FKey& Key_0);
	void InpActEvt_D_K2Node_InputKeyEvent_9(const struct FKey& Key_0);
	void InpActEvt_D_K2Node_InputKeyEvent_42(const struct FKey& Key_0);
	void InpActEvt_D_K2Node_InputKeyEvent_25(const struct FKey& Key_0);
	void InpActEvt_D_K2Node_InputKeyEvent_24(const struct FKey& Key_0);
	void InpActEvt_BlunderBomb_K2Node_InputActionEvent_2(const struct FKey& Key_0);
	void InpActEvt_Bannana_K2Node_InputActionEvent_6(const struct FKey& Key_0);
	void InpActEvt_B_K2Node_InputKeyEvent_38(const struct FKey& Key_0);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_9(const struct FKey& Key_0);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_12(const struct FKey& Key_0);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_11(const struct FKey& Key_0);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_10(const struct FKey& Key_0);
	void InpActEvt_A_K2Node_InputKeyEvent_41(const struct FKey& Key_0);
	void InpActEvt_A_K2Node_InputKeyEvent_32(const struct FKey& Key_0);
	void InpActEvt_A_K2Node_InputKeyEvent_31(const struct FKey& Key_0);
	void InpActEvt_A_K2Node_InputKeyEvent_10(const struct FKey& Key_0);
	void I_was_Just_damaged(class APlayerController* OwningPlayer);
	void I_perished(class APlayerController* OwningPlayer, const class FText& KillerRef, int32 Killer_team, class AActor* Killed_By_ActorRef, int32 Enemy_team, class APlayerState* Killer_Player_State);
	void I_justed_perished_someone(const class AActor* OwningActor, class UObject* Damage_Type, class AActor* Killed_By_ActorRef, class APlayerState* Victimm_Player_State);
	void HudSpawner(class APlayerController* OwningPlayer);
	void HeisenGusHatMusticast(class USceneComponent* MeksHat_0, class USceneComponent* CheeseHat_0, class USceneComponent* HeisungusHat, class USceneComponent* BucketHeadHat_0);
	void Health_Setter();
	void HatType(int32 HatNumber_0);
	void HatChecker();
	void HandCannonHUD();
	void Hand_Cannon_Sound_Multicast(class UObject* Player_State, class AActor* Spawner);
	void Hand_Cannon_Reset();
	void Hand_Cannon_reload_slot_2();
	class AFlintlock_Projectile_Client_C* Hand_Cannon_Bullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation);
	void GunKnockback();
	void Gun_Sound_Server_(class USceneComponent* AttachToComponent, class UObject* Player_State, class AActor* Spawner);
	void Gun_Sound_Multicast(class UObject* Player_State, class AActor* Spawner);
	void Got_a_flag_Now(int32 TeamFlag, class AActor* Player_who_picked_it_up);
	void Goomba();
	void Give_killer_the_name(class ATrainGusPlayer_C* Target, const class FText& I_Killed_Name_0, int32 I_Killed_team_0, class APlayerState* Killed_player_0, const struct FVector& Death_location_0);
	void Give_gus_hud(class APlayerController* OwningPlayer);
	void Give_everyone_the_flintlock_bullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* Instigator_0, class AActor* B);
	void Give_everyone_the_eor_bullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* A, class AActor* Spawner);
	void Give_Everyone_all_the_blunders(class AActor* A, class AActor* Spawner, const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, const struct FVector& Spawn_Transform_Location1, const struct FRotator& Spawn_Transform_Rotation1, const struct FVector& Spawn_Transform_Location2, const struct FRotator& Spawn_Transform_Rotation2, const struct FVector& Spawn_Transform_Location3, const struct FRotator& Spawn_Transform_Rotation3, const struct FVector& Spawn_Transform_Location4, const struct FRotator& Spawn_Transform_Rotation4, const struct FVector& Spawn_Transform_Location5, const struct FRotator& Spawn_Transform_Rotation5, const struct FVector& Spawn_Transform_Location6, const struct FRotator& Spawn_Transform_Rotation6, const struct FVector& Spawn_Transform_Location7, const struct FRotator& Spawn_Transform_Rotation7, const struct FVector& Spawn_Transform_Location8, const struct FRotator& Spawn_Transform_Rotation8, const struct FVector& Spawn_Transform_Location9, const struct FRotator& Spawn_Transform_Rotation9, class AActor* Owner_0);
	void Get_me_off_cannon(class AActor* Cannon, class APawn* InPawn, class AController* Target, class AActor* Actor);
	struct FRotator Get_Flintlock_Spawn_Rotation();
	struct FRotator Get_EOR_Spawn_Rotation();
	void Gather_The_Blunder_Points();
	void Gamemode_HUD();
	void FOV_Transition__UpdateFunc();
	void FOV_Transition__FinishedFunc();
	void FootstepSoundInitial();
	void Footsteps_Server(class AActor* Owner_0);
	void Footsteps_Multicasted(class AActor* Owner_0);
	void Footstep_Wood_Server(class UObject* Spawner);
	void Footstep_Wood_Multicast(class UObject* Spawner);
	void Footstep_Sound_Server(const struct FVector& Location, EPhysicalSurface Selection, class AActor* Target);
	void Footstep_Sound_Multicast(EPhysicalSurface Selection, const struct FVector& Location, class AActor* Target);
	void FlintlockReload2();
	void FlintlockHUD();
	void FlintlockFiring1();
	class AFlintlock_Projectile_Client_C* FlintlockBullet_Server(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class UStaticMeshComponent** cannonball);
	class AFlintlock_Projectile_Client_C* FlintlockBullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation);
	void FlintlockBP(int32 Hat);
	void Flintlock_Sound_Server(class USceneComponent* AttachToComponent, class UObject* Player_State);
	void Flintlock_Sound_Multicast_2(class UObject* Player_State, class USceneComponent* AttachToComponent);
	void Flintlock_Reload_Failed_slot_2();
	void Flintlock_Reload_Failed();
	void Flintlock_Reload_1();
	void FlintBlunderAiminator();
	void FlagDoer(const struct FVector& Spawn_Transform_Location);
	void Finish_Reloading_Flintlock();
	void Finish_Reloading_EOR();
	void Finish_Flintlock_Reload_slot_2();
	void Finish_EOR_Reload_slot_2();
	void Finish_Cannon_Timer_Slot_2();
	void Finish_Blunderbuss_Reload_slot_2();
	void Finish_Blunderbuss_Reload();
	void EyeOfReachHUD();
	void EyeOfReachBP();
	void Eye_of_Reach_Reload_2();
	void Eye_of_reach_Reload_1();
	void ExecuteUbergraph_TrainGusPlayer(int32 EntryPoint);
	void Event_Begin_Play_To_Hat();
	class AFlintlock_Projectile_Client_C* EorBullet_Server(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class UStaticMeshComponent** cannonball);
	void EorBullet(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation);
	void EOR_Reload_Failed_slot_2();
	void EndTheOverlapName();
	void Emote_Twerk(class UTauntMenuWidget_C* Widget);
	void Emote_The_Kicker(class UTauntMenuWidget_C* Widget);
	void Eat_Banana(class UActorComponent* User_banana, class USceneComponent* AttachToComponent, class UObject* Owner_0);
	void DropCannon();
	void DownTeam();
	struct FVector Down_Trace(bool* BlockingHit);
	void Destroy_me(class AActor* Target);
	void Deposited_flag();
	void Deequip_Bananna(class USceneComponent* bannana_0);
	void Decrease_Blunderbomb_Server(int32 Blunderbomb_Amount_0);
	void Damage_Swing_Server(class AActor* DamagedActor, class AActor* DamageCauser, bool Condition_0);
	void Damage_Cannonball(class AActor* Hit_bloke);
	void Damage_Blunderbomb(class AActor* DamagedActor);
	void CustomEvent_9();
	void CustomEvent_2();
	void CustomEvent_1();
	void crunch_multicast(class USceneComponent* AttachToComponent);
	void Correct_pitch_multicast(const struct FRotator& Rotation_0);
	void Correct_pitch(const struct FRotator& Rotation_0);
	void Correct_Camera_Emote_Multicast(float Body_Pitch_Z__Yaw_, float New_Rotation_Y__Pitch_);
	void Correct_Camera_Emote(float Rotation_Z__Yaw_, float New_Rotation_Y__Pitch_);
	void Control_checker();
	void ClientTeamRed();
	void ClientTeamNone();
	void ClientTeamBlue();
	void Clientstun2();
	void Clientstun12();
	void Clientstun1();
	void ClientStun();
	void Clientstopstun2();
	void Clientstopstun12();
	void Clientstopstun1();
	void ClientStopStun();
	void ClientSprint_stop();
	void ClientSprint();
	void ClientNoAmmoSound(const struct FVector& Location);
	void ClientDashDo1();
	void ClientDashDo();
	void ClientDash1();
	void ClientDash();
	void ClientBlunderbussBulletSlot2();
	void Client_material_set(class UPrimitiveComponent* Target);
	void Client_Deny_Cannon();
	void Clear_Sniper_Timer();
	void Clear_Reload_Timer();
	void Clear_Hit_name();
	void Clear_Hand_Cannon_Timer();
	void Clear_Flintlock_Timer();
	void Clear_Blunderbuss_Timer();
	void Circle_Widget__UpdateFunc();
	void Circle_Widget__FinishedFunc();
	void CheeseHatServer(class USceneComponent* MeksHat_0, class USceneComponent* Hat);
	void CheeseHatMulticast(class USceneComponent* MeksHat_0, class USceneComponent* CheeseHat_0, class USceneComponent* Heisengus_Hat, class USceneComponent* BucketHeadHat_0);
	void Check_If_cannon_is_occupied(const struct FVector& Start, const struct FVector& End, class ATrainGusPlayer_C* Target);
	void CharacterVariables();
	void ChangePantServer(const class FString& Pant);
	void ChangePant(const class FString& Pant);
	void Change_Skin_Server(class APlayerState* Player_State, int32 Skin_Number);
	void Change_Skin_Multicast(class APlayerState* Player_State, int32 Selection);
	void Change_FOV(double Multiplyer);
	void Cannonball_Server_Damage(class AActor* Hit_bloke);
	void Cannon_Tip_unshower();
	void Cannon_Tip_Shower(const struct FVector& Spawn_Transform_Location, class ACannon_C* Barrel_Ref);
	void Cannon_sound_server(class UObject* Player_State, class AActor* Spawner);
	void Cannon_Reset_Slot_2();
	void Cannon_Reloading_Gus();
	void Cannon_reload_timer();
	void Cannon_Reload_Slot_1();
	void Cannon_Reload_Failed_Slot_2();
	void Cannon_Reload_Failed();
	void Cannon_Interact_Widget_Unshower();
	void Cannon_Interact_Widget_shower(const struct FVector& Spawn_Transform_Location, class ACannon_C* Barrel_Ref);
	void Cannon_Bullet_Server(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* Spawner, class UAudioComponent* OwnerAudio);
	void Cancel_Climb_into();
	void BucketheadHatMulticast(class USceneComponent* MeksHat_0, class USceneComponent* CheeseHat_0, class USceneComponent* HeisungusHat, class USceneComponent* BucketHeadHat_0);
	void Broman_really_stopped_spritnting();
	void Broman_really_got_damaged();
	void Bring_out_weapon();
	void Brick_Skin();
	void BoxTraceCutlassDash(TArray<struct FHitResult>* OutHits);
	void BoxTraceCutlass(const struct FVector& Start, const struct FVector& End, const struct FRotator& Orientation, TArray<struct FHitResult>* OutHits);
	void BndEvt__TrainGusPlayer_NameCollision_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__TrainGusPlayer_NameCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__TrainGusPlayer_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BlunderbussReload2();
	void BlunderbussHUD();
	void BlunderbussBulletServer2(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, const struct FVector& Spawn_Transform_Location1, const struct FRotator& Spawn_Transform_Rotation1, const struct FVector& Spawn_Transform_Location2, const struct FRotator& Spawn_Transform_Rotation2, const struct FVector& Spawn_Transform_Location3, const struct FRotator& Spawn_Transform_Rotation3, const struct FVector& Spawn_Transform_Location4, const struct FRotator& Spawn_Transform_Rotation4, const struct FVector& Spawn_Transform_Location5, const struct FRotator& Spawn_Transform_Rotation5, const struct FVector& Spawn_Transform_Location6, const struct FRotator& Spawn_Transform_Rotation6, const struct FVector& Spawn_Transform_Location7, const struct FRotator& Spawn_Transform_Rotation7, const struct FVector& Spawn_Transform_Location8, const struct FRotator& Spawn_Transform_Rotation8, const struct FVector& Spawn_Transform_Location9, const struct FRotator& Spawn_Transform_Rotation9, class AActor* Owner_0);
	void BlunderbussBulletServer();
	void BlunderbussBulletClient(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, const struct FVector& Spawn_Transform_Location1, const struct FRotator& Spawn_Transform_Rotation1, const struct FVector& Spawn_Transform_Location2, const struct FRotator& Spawn_Transform_Rotation2, const struct FVector& Spawn_Transform_Location3, const struct FRotator& Spawn_Transform_Rotation3, const struct FVector& Spawn_Transform_Location4, const struct FRotator& Spawn_Transform_Rotation4, const struct FVector& Spawn_Transform_Location5, const struct FRotator& Spawn_Transform_Rotation5, const struct FVector& Spawn_Transform_Location6, const struct FRotator& Spawn_Transform_Rotation6, const struct FVector& Spawn_Transform_Location7, const struct FRotator& Spawn_Transform_Rotation7, const struct FVector& Spawn_Transform_Location8, const struct FRotator& Spawn_Transform_Rotation8, const struct FVector& Spawn_Transform_Location9, const struct FRotator& Spawn_Transform_Rotation9, class AActor* Owner_0, class USceneComponent* AttachToComponent);
	void BlunderbussBP();
	void Blunderbuss_spot_getters();
	void Blunderbuss_Sound_Server(class UObject* Spawner);
	void Blunderbuss_Sound_Multicast(class UObject* Spawner);
	void Blunderbuss_Reload_Failed_slot_2();
	void Blunderbuss_Reload_Failed();
	void Blunderbuss_Reload_1();
	void Blunderbuss_Authority_Multicast(class USceneComponent* AttachToComponent);
	void Blunderbuss_After_Server(class ATrainGusPlayer_C* Target, class ATrainGusPlayer_C* Owner_0);
	void Blunderbuss_After_Multicast(class ATrainGusPlayer_C* Target, class ATrainGusPlayer_C* Owner_0);
	void BlunderbombHUD();
	void Blunderbombclient(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* Owner_0);
	void BlunderbombBarrelWidget_UnShower();
	void BlunderbombBarrelWidget_Shower(const struct FVector& Spawn_Transform_Location, class ABlunderbomb_Barrel_C* Barrel_Ref);
	void Blunderbomb_Throw_Sound_Server(class UObject* Spawner);
	void Blunderbomb_Throw_Sound_Multicast(class UObject* Spawner);
	void Begining_the_play();
	void BannanaHUD();
	void BannanaED_Event_0();
	void BannanaBarrelWidget_Shower(const struct FVector& Spawn_Transform_Location, class ABannana_Barrel_C* Barrel_Ref);
	void Bannana_Scranning_Sound_Server(class UObject* Spawner);
	void Bannana_Scranning_Sound_Multicast(class UObject* Spawner);
	void Bannana_Scranning_Multicast(class USceneComponent* AttachToComponent);
	void Bannana_Equipped_Server(class USceneComponent* bannana_0);
	void Bannana_Barrel_Widget_Unshower();
	void Bananna_sound(class UActorComponent* Target, class USceneComponent* AttachToComponent, const TArray<class UObject*>& List_of_Players_0, class UObject* Owner_Player_State);
	void Autumn_Skin();
	void ApplyTheHat();
	void Apply_Hat_Server(class USceneComponent* MeksHat_0);
	void Apply_Hat_Multi();
	void airshotting();
	void Aiming_event();
	void ADS_PistolBuss();
	void ADS_doing();
	void Add_Death_Server();
	void Add_Death_Multicast();
	void Activate_Twerk_Emote();
	void Activate_The_Kicker_Emote();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TrainGusPlayer_C">();
	}
	static class ATrainGusPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrainGusPlayer_C>();
	}
};
static_assert(alignof(ATrainGusPlayer_C) == 0x000010, "Wrong alignment on ATrainGusPlayer_C");
static_assert(sizeof(ATrainGusPlayer_C) == 0x001400, "Wrong size on ATrainGusPlayer_C");
static_assert(offsetof(ATrainGusPlayer_C, UberGraphFrame) == 0x000600, "Member 'ATrainGusPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannon_wielder) == 0x000608, "Member 'ATrainGusPlayer_C::Cannon_wielder' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HandcannonModel) == 0x000610, "Member 'ATrainGusPlayer_C::HandcannonModel' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FiringParticles4) == 0x000618, "Member 'ATrainGusPlayer_C::FiringParticles4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HandCannonRef) == 0x000620, "Member 'ATrainGusPlayer_C::HandCannonRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannonball_STKM) == 0x000628, "Member 'ATrainGusPlayer_C::Cannonball_STKM' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HandCannon_STKM) == 0x000630, "Member 'ATrainGusPlayer_C::HandCannon_STKM' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BucketHeadHat) == 0x000638, "Member 'ATrainGusPlayer_C::BucketHeadHat' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HeisenGus) == 0x000640, "Member 'ATrainGusPlayer_C::HeisenGus' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CheeseHat) == 0x000648, "Member 'ATrainGusPlayer_C::CheeseHat' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MeksPhysGunStaticMesh) == 0x000650, "Member 'ATrainGusPlayer_C::MeksPhysGunStaticMesh' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint10) == 0x000658, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint10' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint4) == 0x000660, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint5) == 0x000668, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint5' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint6) == 0x000670, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint6' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint9) == 0x000678, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint9' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint2) == 0x000680, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint8) == 0x000688, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint8' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint3) == 0x000690, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint3' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbomb_spawn) == 0x000698, "Member 'ATrainGusPlayer_C::Blunderbomb_spawn' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint1) == 0x0006A0, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussHitscanPoint7) == 0x0006A8, "Member 'ATrainGusPlayer_C::BlunderBussHitscanPoint7' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SwordBlockBox) == 0x0006B0, "Member 'ATrainGusPlayer_C::SwordBlockBox' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Pivot) == 0x0006B8, "Member 'ATrainGusPlayer_C::Pivot' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, sword) == 0x0006C0, "Member 'ATrainGusPlayer_C::sword' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Scene) == 0x0006C8, "Member 'ATrainGusPlayer_C::Scene' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, ThirdPersonLumenCamera) == 0x0006D0, "Member 'ATrainGusPlayer_C::ThirdPersonLumenCamera' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FpsGusArms) == 0x0006D8, "Member 'ATrainGusPlayer_C::FpsGusArms' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FirstPersonCamera) == 0x0006E0, "Member 'ATrainGusPlayer_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FirstPersonLuminCamera) == 0x0006E8, "Member 'ATrainGusPlayer_C::FirstPersonLuminCamera' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, ThirdPersonCamera) == 0x0006F0, "Member 'ATrainGusPlayer_C::ThirdPersonCamera' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SpringArm) == 0x0006F8, "Member 'ATrainGusPlayer_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Third_Person_Pivot) == 0x000700, "Member 'ATrainGusPlayer_C::Third_Person_Pivot' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss1) == 0x000708, "Member 'ATrainGusPlayer_C::Blunderbuss1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flag_Icon_Red_) == 0x000710, "Member 'ATrainGusPlayer_C::Flag_Icon_Red_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flag_Icon_Blue) == 0x000718, "Member 'ATrainGusPlayer_C::Flag_Icon_Blue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SkeletalMesh) == 0x000720, "Member 'ATrainGusPlayer_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, flagpole) == 0x000728, "Member 'ATrainGusPlayer_C::flagpole' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, eyeofreachmodel2) == 0x000730, "Member 'ATrainGusPlayer_C::eyeofreachmodel2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Banana_eater) == 0x000738, "Member 'ATrainGusPlayer_C::Banana_eater' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Gusnana) == 0x000740, "Member 'ATrainGusPlayer_C::Gusnana' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, flintlockshot_Cue) == 0x000748, "Member 'ATrainGusPlayer_C::flintlockshot_Cue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Gusderbomb) == 0x000750, "Member 'ATrainGusPlayer_C::Gusderbomb' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockGus) == 0x000758, "Member 'ATrainGusPlayer_C::FlintlockGus' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NameTagWidget) == 0x000760, "Member 'ATrainGusPlayer_C::NameTagWidget' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NameCollision) == 0x000768, "Member 'ATrainGusPlayer_C::NameCollision' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Damage_facer) == 0x000770, "Member 'ATrainGusPlayer_C::Damage_facer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, windsfx_Cue) == 0x000778, "Member 'ATrainGusPlayer_C::windsfx_Cue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, StompSpawner) == 0x000780, "Member 'ATrainGusPlayer_C::StompSpawner' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, emergewater_Cue) == 0x000788, "Member 'ATrainGusPlayer_C::emergewater_Cue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, submergewater_Cue) == 0x000790, "Member 'ATrainGusPlayer_C::submergewater_Cue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBomb) == 0x000798, "Member 'ATrainGusPlayer_C::BlunderBomb' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FiringParticles3) == 0x0007A0, "Member 'ATrainGusPlayer_C::FiringParticles3' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FiringParticles2) == 0x0007A8, "Member 'ATrainGusPlayer_C::FiringParticles2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FiringParticles1) == 0x0007B0, "Member 'ATrainGusPlayer_C::FiringParticles1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Bannana_STKM) == 0x0007B8, "Member 'ATrainGusPlayer_C::Bannana_STKM' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss_STKM) == 0x0007C0, "Member 'ATrainGusPlayer_C::Blunderbuss_STKM' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Eor_STKM) == 0x0007C8, "Member 'ATrainGusPlayer_C::Eor_STKM' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flintlock_STKM) == 0x0007D0, "Member 'ATrainGusPlayer_C::Flintlock_STKM' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FiringParticles) == 0x0007D8, "Member 'ATrainGusPlayer_C::FiringParticles' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BananaHand) == 0x0007E0, "Member 'ATrainGusPlayer_C::BananaHand' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderFire) == 0x0007E8, "Member 'ATrainGusPlayer_C::BlunderFire' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, EoRFire) == 0x0007F0, "Member 'ATrainGusPlayer_C::EoRFire' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintLockFire) == 0x0007F8, "Member 'ATrainGusPlayer_C::FlintLockFire' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SwordDash_spawner) == 0x000800, "Member 'ATrainGusPlayer_C::SwordDash_spawner' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, handSword) == 0x000808, "Member 'ATrainGusPlayer_C::handSword' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, low_poly_hand_grip_idleanim2) == 0x000810, "Member 'ATrainGusPlayer_C::low_poly_hand_grip_idleanim2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss) == 0x000818, "Member 'ATrainGusPlayer_C::Blunderbuss' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MeksMask) == 0x000820, "Member 'ATrainGusPlayer_C::MeksMask' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderhand) == 0x000828, "Member 'ATrainGusPlayer_C::Blunderhand' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, low_poly_hand_grip_idleanim1) == 0x000830, "Member 'ATrainGusPlayer_C::low_poly_hand_grip_idleanim1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, eyeofreachmodel1) == 0x000838, "Member 'ATrainGusPlayer_C::eyeofreachmodel1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockSkeletonfbx1) == 0x000840, "Member 'ATrainGusPlayer_C::FlintlockSkeletonfbx1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, low_poly_hand_grip_idleanim) == 0x000848, "Member 'ATrainGusPlayer_C::low_poly_hand_grip_idleanim' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Circle_Widget_Alpha_B2317F0243061F163938F39A1FDBE151) == 0x000850, "Member 'ATrainGusPlayer_C::Circle_Widget_Alpha_B2317F0243061F163938F39A1FDBE151' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Circle_Widget__Direction_B2317F0243061F163938F39A1FDBE151) == 0x000854, "Member 'ATrainGusPlayer_C::Circle_Widget__Direction_B2317F0243061F163938F39A1FDBE151' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Circle_Widget) == 0x000858, "Member 'ATrainGusPlayer_C::Circle_Widget' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_4_Homer_5817E25544E8792FA5B29DBBECA99D61) == 0x000860, "Member 'ATrainGusPlayer_C::Timeline_4_Homer_5817E25544E8792FA5B29DBBECA99D61' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_4__Direction_5817E25544E8792FA5B29DBBECA99D61) == 0x000864, "Member 'ATrainGusPlayer_C::Timeline_4__Direction_5817E25544E8792FA5B29DBBECA99D61' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_4) == 0x000868, "Member 'ATrainGusPlayer_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_3_Homer_0CB002C34FE6FB782C3FD78E30248C7B) == 0x000870, "Member 'ATrainGusPlayer_C::Timeline_3_Homer_0CB002C34FE6FB782C3FD78E30248C7B' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_3__Direction_0CB002C34FE6FB782C3FD78E30248C7B) == 0x000874, "Member 'ATrainGusPlayer_C::Timeline_3__Direction_0CB002C34FE6FB782C3FD78E30248C7B' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_3) == 0x000878, "Member 'ATrainGusPlayer_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Land_Recoil_Alpha_AFDF09924B56A3D60E4812AE779614D4) == 0x000880, "Member 'ATrainGusPlayer_C::Land_Recoil_Alpha_AFDF09924B56A3D60E4812AE779614D4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Land_Recoil__Direction_AFDF09924B56A3D60E4812AE779614D4) == 0x000884, "Member 'ATrainGusPlayer_C::Land_Recoil__Direction_AFDF09924B56A3D60E4812AE779614D4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Land_Recoil) == 0x000888, "Member 'ATrainGusPlayer_C::Land_Recoil' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sprint_FOV_Alpha_8BA50E124DCB46FE356651BC0E3D352F) == 0x000890, "Member 'ATrainGusPlayer_C::Sprint_FOV_Alpha_8BA50E124DCB46FE356651BC0E3D352F' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sprint_FOV__Direction_8BA50E124DCB46FE356651BC0E3D352F) == 0x000894, "Member 'ATrainGusPlayer_C::Sprint_FOV__Direction_8BA50E124DCB46FE356651BC0E3D352F' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sprint_FOV) == 0x000898, "Member 'ATrainGusPlayer_C::Sprint_FOV' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_2_NewTrack_0_418BF244487DE8369C424E8895E4099B) == 0x0008A0, "Member 'ATrainGusPlayer_C::Timeline_2_NewTrack_0_418BF244487DE8369C424E8895E4099B' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_2__Direction_418BF244487DE8369C424E8895E4099B) == 0x0008A4, "Member 'ATrainGusPlayer_C::Timeline_2__Direction_418BF244487DE8369C424E8895E4099B' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_2) == 0x0008A8, "Member 'ATrainGusPlayer_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_1_Homer_C553A1E24D845FDA62CE21A81C9BE3E8) == 0x0008B0, "Member 'ATrainGusPlayer_C::Timeline_1_Homer_C553A1E24D845FDA62CE21A81C9BE3E8' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_1__Direction_C553A1E24D845FDA62CE21A81C9BE3E8) == 0x0008B4, "Member 'ATrainGusPlayer_C::Timeline_1__Direction_C553A1E24D845FDA62CE21A81C9BE3E8' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_1) == 0x0008B8, "Member 'ATrainGusPlayer_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FOV_Transition_Homer_BCB7DB86457C6DFDDE66869CDB3DD657) == 0x0008C0, "Member 'ATrainGusPlayer_C::FOV_Transition_Homer_BCB7DB86457C6DFDDE66869CDB3DD657' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FOV_Transition__Direction_BCB7DB86457C6DFDDE66869CDB3DD657) == 0x0008C4, "Member 'ATrainGusPlayer_C::FOV_Transition__Direction_BCB7DB86457C6DFDDE66869CDB3DD657' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FOV_Transition) == 0x0008C8, "Member 'ATrainGusPlayer_C::FOV_Transition' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_0_NewTrack_0_6F2B174846F14CC2A1EFCEB9587720B4) == 0x0008D0, "Member 'ATrainGusPlayer_C::Timeline_0_NewTrack_0_6F2B174846F14CC2A1EFCEB9587720B4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_0__Direction_6F2B174846F14CC2A1EFCEB9587720B4) == 0x0008D4, "Member 'ATrainGusPlayer_C::Timeline_0__Direction_6F2B174846F14CC2A1EFCEB9587720B4' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Timeline_0) == 0x0008D8, "Member 'ATrainGusPlayer_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Turn_Rate_Gamepad) == 0x0008E0, "Member 'ATrainGusPlayer_C::Turn_Rate_Gamepad' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, OnUseItem) == 0x0008E8, "Member 'ATrainGusPlayer_C::OnUseItem' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Speed) == 0x0008F8, "Member 'ATrainGusPlayer_C::Speed' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MaxWalkSpeed) == 0x000900, "Member 'ATrainGusPlayer_C::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MaxRunSpeed) == 0x000908, "Member 'ATrainGusPlayer_C::MaxRunSpeed' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, IsRunning_) == 0x000910, "Member 'ATrainGusPlayer_C::IsRunning_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockEquipped) == 0x000918, "Member 'ATrainGusPlayer_C::FlintlockEquipped' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Pitch) == 0x000920, "Member 'ATrainGusPlayer_C::Pitch' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, GusanimBP) == 0x000928, "Member 'ATrainGusPlayer_C::GusanimBP' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Rotation) == 0x000930, "Member 'ATrainGusPlayer_C::Rotation' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Equipped_weapon) == 0x000948, "Member 'ATrainGusPlayer_C::Equipped_weapon' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CanFire_) == 0x00094C, "Member 'ATrainGusPlayer_C::CanFire_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Current_Health) == 0x000950, "Member 'ATrainGusPlayer_C::Current_Health' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Invulnarable) == 0x000958, "Member 'ATrainGusPlayer_C::Invulnarable' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, EoR_aiming_) == 0x000959, "Member 'ATrainGusPlayer_C::EoR_aiming_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Aimdoing) == 0x00095A, "Member 'ATrainGusPlayer_C::Aimdoing' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, RealFlintlockAim_) == 0x00095B, "Member 'ATrainGusPlayer_C::RealFlintlockAim_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, ThrowingBlunderbomb_) == 0x00095C, "Member 'ATrainGusPlayer_C::ThrowingBlunderbomb_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HatRefrence) == 0x000960, "Member 'ATrainGusPlayer_C::HatRefrence' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, EquippedWeapon2) == 0x000968, "Member 'ATrainGusPlayer_C::EquippedWeapon2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Second_slot_) == 0x00096C, "Member 'ATrainGusPlayer_C::Second_slot_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Refresh_weapons) == 0x00096D, "Member 'ATrainGusPlayer_C::Refresh_weapons' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Second_swing_) == 0x00096E, "Member 'ATrainGusPlayer_C::Second_swing_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CutlassSwings) == 0x000970, "Member 'ATrainGusPlayer_C::CutlassSwings' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, AfterComboDelay) == 0x000974, "Member 'ATrainGusPlayer_C::AfterComboDelay' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Stunspeed) == 0x000978, "Member 'ATrainGusPlayer_C::Stunspeed' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HasSwung_) == 0x000980, "Member 'ATrainGusPlayer_C::HasSwung_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HatNumber) == 0x000984, "Member 'ATrainGusPlayer_C::HatNumber' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Left_clicking_) == 0x000988, "Member 'ATrainGusPlayer_C::Left_clicking_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, DashRef) == 0x000990, "Member 'ATrainGusPlayer_C::DashRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, right_clicking_) == 0x000998, "Member 'ATrainGusPlayer_C::right_clicking_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sens) == 0x0009A0, "Member 'ATrainGusPlayer_C::Sens' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sens2) == 0x0009A8, "Member 'ATrainGusPlayer_C::Sens2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MenuRef) == 0x0009B0, "Member 'ATrainGusPlayer_C::MenuRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Dashing_) == 0x0009B8, "Member 'ATrainGusPlayer_C::Dashing_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, hitmarker) == 0x0009C0, "Member 'ATrainGusPlayer_C::hitmarker' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Kills) == 0x0009C8, "Member 'ATrainGusPlayer_C::Kills' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Object_ref) == 0x0009D0, "Member 'ATrainGusPlayer_C::Object_ref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, KillFeed) == 0x0009D8, "Member 'ATrainGusPlayer_C::KillFeed' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, KillFeedVar) == 0x0009E8, "Member 'ATrainGusPlayer_C::KillFeedVar' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flintlock_ammo) == 0x0009F0, "Member 'ATrainGusPlayer_C::Flintlock_ammo' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Eye_of_reach_ammo) == 0x0009F4, "Member 'ATrainGusPlayer_C::Eye_of_reach_ammo' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss_Ammo) == 0x0009F8, "Member 'ATrainGusPlayer_C::Blunderbuss_Ammo' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Interacting) == 0x0009FC, "Member 'ATrainGusPlayer_C::Interacting' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Key) == 0x000A00, "Member 'ATrainGusPlayer_C::Key' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Has_Blunderbomb_Equipped) == 0x000A18, "Member 'ATrainGusPlayer_C::Has_Blunderbomb_Equipped' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, WaterDoing) == 0x000A20, "Member 'ATrainGusPlayer_C::WaterDoing' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, StopWaterdoing) == 0x000A30, "Member 'ATrainGusPlayer_C::StopWaterdoing' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintLockHitmarkerDis) == 0x000A40, "Member 'ATrainGusPlayer_C::FlintLockHitmarkerDis' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HudRef) == 0x000A50, "Member 'ATrainGusPlayer_C::HudRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockAmmo2) == 0x000A58, "Member 'ATrainGusPlayer_C::FlintlockAmmo2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Eye_of_reach_ammo2) == 0x000A5C, "Member 'ATrainGusPlayer_C::Eye_of_reach_ammo2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss_Ammo2) == 0x000A60, "Member 'ATrainGusPlayer_C::Blunderbuss_Ammo2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SaveOptions) == 0x000A68, "Member 'ATrainGusPlayer_C::SaveOptions' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Vision_of_field) == 0x000A70, "Member 'ATrainGusPlayer_C::Vision_of_field' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Save_game) == 0x000A78, "Member 'ATrainGusPlayer_C::Save_game' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Options_Saving) == 0x000A80, "Member 'ATrainGusPlayer_C::Options_Saving' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BringUpInteract) == 0x000A90, "Member 'ATrainGusPlayer_C::BringUpInteract' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, StopInteract) == 0x000AA0, "Member 'ATrainGusPlayer_C::StopInteract' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NewVar_0) == 0x000AB0, "Member 'ATrainGusPlayer_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FireFlintlock1) == 0x000BB8, "Member 'ATrainGusPlayer_C::FireFlintlock1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Team) == 0x000BC8, "Member 'ATrainGusPlayer_C::Team' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Plus1) == 0x000BCC, "Member 'ATrainGusPlayer_C::Plus1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, brev) == 0x000BD0, "Member 'ATrainGusPlayer_C::brev' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Damage_Causer) == 0x000BD8, "Member 'ATrainGusPlayer_C::Damage_Causer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Instigated_By) == 0x000BE0, "Member 'ATrainGusPlayer_C::Instigated_By' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Canfire__slot_2) == 0x000BE8, "Member 'ATrainGusPlayer_C::Canfire__slot_2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Swap_delay) == 0x000BE9, "Member 'ATrainGusPlayer_C::Swap_delay' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Skip_swap_delay) == 0x000BEA, "Member 'ATrainGusPlayer_C::Skip_swap_delay' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Reload) == 0x000BEB, "Member 'ATrainGusPlayer_C::Reload' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, TeamSwitcher) == 0x000BF0, "Member 'ATrainGusPlayer_C::TeamSwitcher' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, TeamBlue) == 0x000C00, "Member 'ATrainGusPlayer_C::TeamBlue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, TeamRed) == 0x000C10, "Member 'ATrainGusPlayer_C::TeamRed' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Hat_Apply) == 0x000C20, "Member 'ATrainGusPlayer_C::Hat_Apply' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MeksHat) == 0x000C30, "Member 'ATrainGusPlayer_C::MeksHat' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NoHat) == 0x000C40, "Member 'ATrainGusPlayer_C::NoHat' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, bannana) == 0x000C50, "Member 'ATrainGusPlayer_C::bannana' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Bannana_Amount) == 0x000C54, "Member 'ATrainGusPlayer_C::Bannana_Amount' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Intensity) == 0x000C58, "Member 'ATrainGusPlayer_C::Intensity' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Fire_Ableing_slot_1) == 0x000C60, "Member 'ATrainGusPlayer_C::Fire_Ableing_slot_1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flintlock) == 0x000C68, "Member 'ATrainGusPlayer_C::Flintlock' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockRef) == 0x000C78, "Member 'ATrainGusPlayer_C::FlintlockRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Scoreboard) == 0x000C80, "Member 'ATrainGusPlayer_C::Scoreboard' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Name_0) == 0x000C88, "Member 'ATrainGusPlayer_C::Name_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Deaths) == 0x000C98, "Member 'ATrainGusPlayer_C::Deaths' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sprinting) == 0x000C9C, "Member 'ATrainGusPlayer_C::Sprinting' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, W_holding) == 0x000C9D, "Member 'ATrainGusPlayer_C::W_holding' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Ive_Nowt_Equipped) == 0x000C9E, "Member 'ATrainGusPlayer_C::Ive_Nowt_Equipped' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Gun_Equipped) == 0x000C9F, "Member 'ATrainGusPlayer_C::Gun_Equipped' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Knockback) == 0x000CA0, "Member 'ATrainGusPlayer_C::Knockback' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, GusArmsRef) == 0x000CB0, "Member 'ATrainGusPlayer_C::GusArmsRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, EquipedFlintlock) == 0x000CB8, "Member 'ATrainGusPlayer_C::EquipedFlintlock' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockFired) == 0x000CB9, "Member 'ATrainGusPlayer_C::FlintlockFired' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, EorFired) == 0x000CBA, "Member 'ATrainGusPlayer_C::EorFired' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BlunderBussFired) == 0x000CBB, "Member 'ATrainGusPlayer_C::BlunderBussFired' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Eating_Bannana) == 0x000CBC, "Member 'ATrainGusPlayer_C::Eating_Bannana' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Me_got_bannana) == 0x000CBD, "Member 'ATrainGusPlayer_C::Me_got_bannana' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Viewmodel_) == 0x000CBE, "Member 'ATrainGusPlayer_C::Viewmodel_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Damage_Indecator) == 0x000CC0, "Member 'ATrainGusPlayer_C::Damage_Indecator' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, BannanaED) == 0x000CD0, "Member 'ATrainGusPlayer_C::BannanaED' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Give_me_a_kill_ping) == 0x000CE0, "Member 'ATrainGusPlayer_C::Give_me_a_kill_ping' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Just_touched_someone) == 0x000CF0, "Member 'ATrainGusPlayer_C::Just_touched_someone' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Gusref) == 0x000CF8, "Member 'ATrainGusPlayer_C::Gusref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Give_me_a_doboing) == 0x000D00, "Member 'ATrainGusPlayer_C::Give_me_a_doboing' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, He_going_fast) == 0x000D10, "Member 'ATrainGusPlayer_C::He_going_fast' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, chatBoxUI) == 0x000D18, "Member 'ATrainGusPlayer_C::chatBoxUI' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Last_Hit_By) == 0x000D20, "Member 'ATrainGusPlayer_C::Last_Hit_By' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, My_team) == 0x000D28, "Member 'ATrainGusPlayer_C::My_team' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, My_Name) == 0x000D30, "Member 'ATrainGusPlayer_C::My_Name' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Last_Hit_By_Name) == 0x000D48, "Member 'ATrainGusPlayer_C::Last_Hit_By_Name' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Give_me_a_kill_message) == 0x000D60, "Member 'ATrainGusPlayer_C::Give_me_a_kill_message' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Get_enemy_team) == 0x000D70, "Member 'ATrainGusPlayer_C::Get_enemy_team' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, IsDead_) == 0x000D74, "Member 'ATrainGusPlayer_C::IsDead_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, client_health) == 0x000D78, "Member 'ATrainGusPlayer_C::client_health' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, I_just_switched) == 0x000D80, "Member 'ATrainGusPlayer_C::I_just_switched' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, StompGPS) == 0x000D81, "Member 'ATrainGusPlayer_C::StompGPS' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, I_Killed_Name) == 0x000D88, "Member 'ATrainGusPlayer_C::I_Killed_Name' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Shotted_Rotation_EOR) == 0x000DA0, "Member 'ATrainGusPlayer_C::Shotted_Rotation_EOR' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, ShottedLocation) == 0x000DB8, "Member 'ATrainGusPlayer_C::ShottedLocation' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, OverlapEnum) == 0x000DD0, "Member 'ATrainGusPlayer_C::OverlapEnum' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Player_Overlapping) == 0x000DD8, "Member 'ATrainGusPlayer_C::Player_Overlapping' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Player_Name_Ref) == 0x000DE8, "Member 'ATrainGusPlayer_C::Player_Name_Ref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Player_name) == 0x000DF8, "Member 'ATrainGusPlayer_C::Player_name' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, WidgetVisibility) == 0x000E08, "Member 'ATrainGusPlayer_C::WidgetVisibility' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Widget_Visibility_Ref) == 0x000E09, "Member 'ATrainGusPlayer_C::Widget_Visibility_Ref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Hit_Actor) == 0x000E10, "Member 'ATrainGusPlayer_C::Hit_Actor' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Did_hit_block) == 0x000E18, "Member 'ATrainGusPlayer_C::Did_hit_block' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Hit_gentlemen) == 0x000E19, "Member 'ATrainGusPlayer_C::Hit_gentlemen' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, PlayerTitle) == 0x000E20, "Member 'ATrainGusPlayer_C::PlayerTitle' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, TitleBringer) == 0x000E38, "Member 'ATrainGusPlayer_C::TitleBringer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, My_object_ref) == 0x000E48, "Member 'ATrainGusPlayer_C::My_object_ref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Dead_) == 0x000E50, "Member 'ATrainGusPlayer_C::Dead_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Lock_Input_) == 0x000E51, "Member 'ATrainGusPlayer_C::Lock_Input_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Zero_float) == 0x000E58, "Member 'ATrainGusPlayer_C::Zero_float' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Every_player) == 0x000E60, "Member 'ATrainGusPlayer_C::Every_player' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Self_0) == 0x000E70, "Member 'ATrainGusPlayer_C::Self_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, List_of_Players) == 0x000E78, "Member 'ATrainGusPlayer_C::List_of_Players' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Everybody) == 0x000E88, "Member 'ATrainGusPlayer_C::Everybody' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockEquppiedRightnow) == 0x000E98, "Member 'ATrainGusPlayer_C::FlintlockEquppiedRightnow' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintlockAimer) == 0x000E99, "Member 'ATrainGusPlayer_C::FlintlockAimer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Holding_Weapon_) == 0x000E9A, "Member 'ATrainGusPlayer_C::Holding_Weapon_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Eye_of_Reach_Equipped_rightnow) == 0x000E9B, "Member 'ATrainGusPlayer_C::Eye_of_Reach_Equipped_rightnow' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Interact_key) == 0x000EA0, "Member 'ATrainGusPlayer_C::Interact_key' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Force) == 0x000EB8, "Member 'ATrainGusPlayer_C::Force' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, InTheDo) == 0x000ED0, "Member 'ATrainGusPlayer_C::InTheDo' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Your_too_high) == 0x000ED8, "Member 'ATrainGusPlayer_C::Your_too_high' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Dampener) == 0x000EE8, "Member 'ATrainGusPlayer_C::Dampener' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Yea_thats_better) == 0x000EF0, "Member 'ATrainGusPlayer_C::Yea_thats_better' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Twohanded) == 0x000F00, "Member 'ATrainGusPlayer_C::Twohanded' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, EOR_aimer) == 0x000F01, "Member 'ATrainGusPlayer_C::EOR_aimer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Am_i_controlled_) == 0x000F08, "Member 'ATrainGusPlayer_C::Am_i_controlled_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Condition) == 0x000F18, "Member 'ATrainGusPlayer_C::Condition' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NewVar_1) == 0x000F20, "Member 'ATrainGusPlayer_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint1L) == 0x000F30, "Member 'ATrainGusPlayer_C::Blunderbusspoint1L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint1R) == 0x000F48, "Member 'ATrainGusPlayer_C::Blunderbusspoint1R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint2L) == 0x000F60, "Member 'ATrainGusPlayer_C::Blunderbusspoint2L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint2R) == 0x000F78, "Member 'ATrainGusPlayer_C::Blunderbusspoint2R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint3L) == 0x000F90, "Member 'ATrainGusPlayer_C::Blunderbusspoint3L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint3R) == 0x000FA8, "Member 'ATrainGusPlayer_C::Blunderbusspoint3R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint4L) == 0x000FC0, "Member 'ATrainGusPlayer_C::Blunderbusspoint4L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint4R) == 0x000FD8, "Member 'ATrainGusPlayer_C::Blunderbusspoint4R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint5L) == 0x000FF0, "Member 'ATrainGusPlayer_C::Blunderbusspoint5L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint5R) == 0x001008, "Member 'ATrainGusPlayer_C::Blunderbusspoint5R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint6L) == 0x001020, "Member 'ATrainGusPlayer_C::Blunderbusspoint6L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint6R) == 0x001038, "Member 'ATrainGusPlayer_C::Blunderbusspoint6R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint7L) == 0x001050, "Member 'ATrainGusPlayer_C::Blunderbusspoint7L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint7R) == 0x001068, "Member 'ATrainGusPlayer_C::Blunderbusspoint7R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint8L) == 0x001080, "Member 'ATrainGusPlayer_C::Blunderbusspoint8L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint8R) == 0x001098, "Member 'ATrainGusPlayer_C::Blunderbusspoint8R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint9L) == 0x0010B0, "Member 'ATrainGusPlayer_C::Blunderbusspoint9L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint9R) == 0x0010C8, "Member 'ATrainGusPlayer_C::Blunderbusspoint9R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint10L) == 0x0010E0, "Member 'ATrainGusPlayer_C::Blunderbusspoint10L' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbusspoint10R) == 0x0010F8, "Member 'ATrainGusPlayer_C::Blunderbusspoint10R' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Vector_salamanca) == 0x001110, "Member 'ATrainGusPlayer_C::Vector_salamanca' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Team_Flag) == 0x001114, "Member 'ATrainGusPlayer_C::Team_Flag' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, gotblue) == 0x001118, "Member 'ATrainGusPlayer_C::gotblue' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, gotred) == 0x001119, "Member 'ATrainGusPlayer_C::gotred' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CTF_HUD_Ref) == 0x001120, "Member 'ATrainGusPlayer_C::CTF_HUD_Ref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HUD_Ref) == 0x001128, "Member 'ATrainGusPlayer_C::HUD_Ref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CTFRedScore) == 0x001130, "Member 'ATrainGusPlayer_C::CTFRedScore' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CTFBlueScore) == 0x001134, "Member 'ATrainGusPlayer_C::CTFBlueScore' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Controllerref) == 0x001138, "Member 'ATrainGusPlayer_C::Controllerref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, PlayerControllerref) == 0x001140, "Member 'ATrainGusPlayer_C::PlayerControllerref' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannon_im_using) == 0x001148, "Member 'ATrainGusPlayer_C::Cannon_im_using' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannon_) == 0x001150, "Member 'ATrainGusPlayer_C::Cannon_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannon_loadinto_timer) == 0x001158, "Member 'ATrainGusPlayer_C::Cannon_loadinto_timer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Reloading) == 0x001160, "Member 'ATrainGusPlayer_C::Reloading' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Reload_time) == 0x001168, "Member 'ATrainGusPlayer_C::Reload_time' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Loaded) == 0x001170, "Member 'ATrainGusPlayer_C::Loaded' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss_Equipped_Right_now) == 0x001171, "Member 'ATrainGusPlayer_C::Blunderbuss_Equipped_Right_now' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, GunReloadWidget) == 0x001178, "Member 'ATrainGusPlayer_C::GunReloadWidget' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, IsReloadingFlintlock_) == 0x001180, "Member 'ATrainGusPlayer_C::IsReloadingFlintlock_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, IsReloadingEOR_) == 0x001181, "Member 'ATrainGusPlayer_C::IsReloadingEOR_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Pressed_X) == 0x001182, "Member 'ATrainGusPlayer_C::Pressed_X' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, IsReloadingBlunderbuss_) == 0x001183, "Member 'ATrainGusPlayer_C::IsReloadingBlunderbuss_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Emoting) == 0x001184, "Member 'ATrainGusPlayer_C::Emoting' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NPC_) == 0x001185, "Member 'ATrainGusPlayer_C::NPC_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Kill_Confirmed_Widget) == 0x001186, "Member 'ATrainGusPlayer_C::Kill_Confirmed_Widget' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, I_Killed_team) == 0x001188, "Member 'ATrainGusPlayer_C::I_Killed_team' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Lumin) == 0x00118C, "Member 'ATrainGusPlayer_C::Lumin' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, A_key) == 0x00118D, "Member 'ATrainGusPlayer_C::A_key' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Right_Mouse_Button) == 0x00118E, "Member 'ATrainGusPlayer_C::Right_Mouse_Button' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sword_Equppied) == 0x00118F, "Member 'ATrainGusPlayer_C::Sword_Equppied' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blocking) == 0x001190, "Member 'ATrainGusPlayer_C::Blocking' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SwordSwing1) == 0x001191, "Member 'ATrainGusPlayer_C::SwordSwing1' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, SwordSwing2) == 0x001192, "Member 'ATrainGusPlayer_C::SwordSwing2' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Swings) == 0x001194, "Member 'ATrainGusPlayer_C::Swings' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Swingamuss_) == 0x001198, "Member 'ATrainGusPlayer_C::Swingamuss_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Last_swing) == 0x001199, "Member 'ATrainGusPlayer_C::Last_swing' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Swing_Hit_) == 0x00119A, "Member 'ATrainGusPlayer_C::Swing_Hit_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Actors_to_Ignore) == 0x0011A0, "Member 'ATrainGusPlayer_C::Actors_to_Ignore' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, W_doering) == 0x0011B0, "Member 'ATrainGusPlayer_C::W_doering' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, D_doer) == 0x0011B1, "Member 'ATrainGusPlayer_C::D_doer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, S_inating) == 0x0011B2, "Member 'ATrainGusPlayer_C::S_inating' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Can_Dodge_) == 0x0011B3, "Member 'ATrainGusPlayer_C::Can_Dodge_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Holding_left_click) == 0x0011B4, "Member 'ATrainGusPlayer_C::Holding_left_click' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Dashingteller) == 0x0011B5, "Member 'ATrainGusPlayer_C::Dashingteller' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Dashingtellerfloat) == 0x0011B8, "Member 'ATrainGusPlayer_C::Dashingtellerfloat' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Dashinating) == 0x0011C0, "Member 'ATrainGusPlayer_C::Dashinating' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Hit_Component) == 0x0011C8, "Member 'ATrainGusPlayer_C::Hit_Component' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Hit_Actor_0) == 0x0011D0, "Member 'ATrainGusPlayer_C::Hit_Actor_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Out_Hits) == 0x0011D8, "Member 'ATrainGusPlayer_C::Out_Hits' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Out_Hits_0) == 0x0011E8, "Member 'ATrainGusPlayer_C::Out_Hits_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Killed_player) == 0x0011F8, "Member 'ATrainGusPlayer_C::Killed_player' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunder_aiming_) == 0x001200, "Member 'ATrainGusPlayer_C::Blunder_aiming_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Shotted_Rotation_Flintlock) == 0x001208, "Member 'ATrainGusPlayer_C::Shotted_Rotation_Flintlock' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Shotted_Location_Flintlock) == 0x001220, "Member 'ATrainGusPlayer_C::Shotted_Location_Flintlock' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flinty_Aiming_) == 0x001238, "Member 'ATrainGusPlayer_C::Flinty_Aiming_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sniper_Aimer_) == 0x001239, "Member 'ATrainGusPlayer_C::Sniper_Aimer_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Shooter_Player_State) == 0x001240, "Member 'ATrainGusPlayer_C::Shooter_Player_State' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunder_Aimer) == 0x001248, "Member 'ATrainGusPlayer_C::Blunder_Aimer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sensitivity_multiplyer) == 0x001250, "Member 'ATrainGusPlayer_C::Sensitivity_multiplyer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sniper_Sens) == 0x001258, "Member 'ATrainGusPlayer_C::Sniper_Sens' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, FlintBlunderSens) == 0x001260, "Member 'ATrainGusPlayer_C::FlintBlunderSens' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Is_Reload_) == 0x001268, "Member 'ATrainGusPlayer_C::Is_Reload_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Equip_Doohickey) == 0x001269, "Member 'ATrainGusPlayer_C::Equip_Doohickey' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbomb_Amount) == 0x00126C, "Member 'ATrainGusPlayer_C::Blunderbomb_Amount' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Bannana_Interact) == 0x001270, "Member 'ATrainGusPlayer_C::Bannana_Interact' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Banana_Widget_Activated_) == 0x001278, "Member 'ATrainGusPlayer_C::Banana_Widget_Activated_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunder_Interact) == 0x001280, "Member 'ATrainGusPlayer_C::Blunder_Interact' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Twerk_Emote) == 0x001288, "Member 'ATrainGusPlayer_C::Twerk_Emote' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Kicker_Emote) == 0x001289, "Member 'ATrainGusPlayer_C::Kicker_Emote' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Target_Arm_Length) == 0x00128C, "Member 'ATrainGusPlayer_C::Target_Arm_Length' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Can_Aim_) == 0x001290, "Member 'ATrainGusPlayer_C::Can_Aim_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, NamePlateActors) == 0x001298, "Member 'ATrainGusPlayer_C::NamePlateActors' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, MyNamePlateActor) == 0x0012A8, "Member 'ATrainGusPlayer_C::MyNamePlateActor' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Nearby_players) == 0x0012B0, "Member 'ATrainGusPlayer_C::Nearby_players' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, PlayerNameList) == 0x0012C0, "Member 'ATrainGusPlayer_C::PlayerNameList' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, WeaponSkin) == 0x001310, "Member 'ATrainGusPlayer_C::WeaponSkin' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Invert_X) == 0x001314, "Member 'ATrainGusPlayer_C::Invert_X' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Invert_Y) == 0x001315, "Member 'ATrainGusPlayer_C::Invert_Y' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Invert_XF) == 0x001318, "Member 'ATrainGusPlayer_C::Invert_XF' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Invert_YF) == 0x001320, "Member 'ATrainGusPlayer_C::Invert_YF' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Damage_Causer_0) == 0x001328, "Member 'ATrainGusPlayer_C::Damage_Causer_0' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Right_Mousing) == 0x001330, "Member 'ATrainGusPlayer_C::Right_Mousing' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Current_Fov) == 0x001334, "Member 'ATrainGusPlayer_C::Current_Fov' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Eye_of_aiming_fart) == 0x001338, "Member 'ATrainGusPlayer_C::Eye_of_aiming_fart' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flintlock_aiming_fart) == 0x001339, "Member 'ATrainGusPlayer_C::Flintlock_aiming_fart' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss_aiming_fart) == 0x00133A, "Member 'ATrainGusPlayer_C::Blunderbuss_aiming_fart' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, ReticleRef) == 0x001340, "Member 'ATrainGusPlayer_C::ReticleRef' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Sniper_Current_Timer) == 0x001348, "Member 'ATrainGusPlayer_C::Sniper_Current_Timer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Flintlock_Current_Timer) == 0x001350, "Member 'ATrainGusPlayer_C::Flintlock_Current_Timer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Blunderbuss_Current_Timer) == 0x001358, "Member 'ATrainGusPlayer_C::Blunderbuss_Current_Timer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Load_Into_Timer) == 0x001360, "Member 'ATrainGusPlayer_C::Load_Into_Timer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, As_Cannon) == 0x001368, "Member 'ATrainGusPlayer_C::As_Cannon' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Inside_Cannon_) == 0x001370, "Member 'ATrainGusPlayer_C::Inside_Cannon_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannon_Tip_Widget) == 0x001378, "Member 'ATrainGusPlayer_C::Cannon_Tip_Widget' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Cannon_Widget_) == 0x001380, "Member 'ATrainGusPlayer_C::Cannon_Widget_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, RemoveAimingFovVar) == 0x001388, "Member 'ATrainGusPlayer_C::RemoveAimingFovVar' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HandCannonEquipedRightNow) == 0x001389, "Member 'ATrainGusPlayer_C::HandCannonEquipedRightNow' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, ReloadCannon_) == 0x00138A, "Member 'ATrainGusPlayer_C::ReloadCannon_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, CannonFired_) == 0x00138B, "Member 'ATrainGusPlayer_C::CannonFired_' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Handcannon_Reload_Timer) == 0x001390, "Member 'ATrainGusPlayer_C::Handcannon_Reload_Timer' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, HandCannonAmmo) == 0x001398, "Member 'ATrainGusPlayer_C::HandCannonAmmo' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Real_Rotation) == 0x0013A0, "Member 'ATrainGusPlayer_C::Real_Rotation' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Temp_Rotation) == 0x0013B8, "Member 'ATrainGusPlayer_C::Temp_Rotation' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Temp_Location) == 0x0013D0, "Member 'ATrainGusPlayer_C::Temp_Location' has a wrong offset!");
static_assert(offsetof(ATrainGusPlayer_C, Death_location) == 0x0013E8, "Member 'ATrainGusPlayer_C::Death_location' has a wrong offset!");

}

