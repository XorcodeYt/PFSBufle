#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GusPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GusPlayer.GusPlayer_C
// 0x0320 (0x0920 - 0x0600)
class AGusPlayer_C final : public ACharacter
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   hands1;                                            // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_EyeOfReach;                                     // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   bp_BLUNDERBUS;                                     // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Flintlock;                                      // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Pivot;                                             // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Eyeofrreach_pooint;                                // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Flintlock_point;                                   // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Blunder_point;                                     // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   HandPoint;                                         // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        blunderbuss_fireing_Cue;                           // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow11;                                           // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow10;                                           // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow9;                                            // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow8;                                            // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow7;                                            // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow6;                                            // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow5;                                            // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow4;                                            // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow3;                                            // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow2;                                            // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Holder;                                            // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        flintlockshot_Cue;                                 // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThirdPersonCamera;                                 // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_AimDownHomer_183E173A494E9BD952BBAAB564AEF86E; // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_6__Direction_183E173A494E9BD952BBAAB564AEF86E; // 0x06E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_AimDownHomer_E7D614054373CC3A99610AA20F4E70BD; // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_E7D614054373CC3A99610AA20F4E70BD; // 0x06F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F5[0x3];                                      // 0x06F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_AimDownHomer_180F6BEB4E57ED5ADB367BA80CE58F26; // 0x0700(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_180F6BEB4E57ED5ADB367BA80CE58F26; // 0x0704(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_705[0x3];                                      // 0x0705(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_AimDownHomer_E3265CCA4902CFDA9050B0AC60E95F3D; // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_E3265CCA4902CFDA9050B0AC60E95F3D; // 0x0714(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_715[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_AimDownHomer_2A1DD41441B7AE0497A7FDBBB50C99A0; // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_2A1DD41441B7AE0497A7FDBBB50C99A0; // 0x0724(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_725[0x3];                                      // 0x0725(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimdownPorridge_AimDownHomer_23611F7C407AFEFB1128C992167ADD8A; // 0x0730(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AimdownPorridge__Direction_23611F7C407AFEFB1128C992167ADD8A; // 0x0734(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_735[0x3];                                      // 0x0735(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AimdownPorridge;                                   // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_NewTrack_0_8BFDDFD947C3631D26D49B9430DE34DF; // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_8BFDDFD947C3631D26D49B9430DE34DF; // 0x0744(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_745[0x3];                                      // 0x0745(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_NewTrack_0_EA5A45FC42105582BD18C98BC3DCFF5B; // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_EA5A45FC42105582BD18C98BC3DCFF5B; // 0x0754(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_755[0x3];                                      // 0x0755(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aimdownsus_NewTrack_0_054432AA486851572A52908AF9F6C4AA; // 0x0760(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Aimdownsus__Direction_054432AA486851572A52908AF9F6C4AA; // 0x0764(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_765[0x3];                                      // 0x0765(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Aimdownsus;                                        // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnRateGamepad;                                   // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkSpeed;                                         // 0x0778(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x0780(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOptionsMenuNew_C*                      MenuRef;                                           // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        invert_value;                                      // 0x0790(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inverted_;                                         // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sens;                                              // 0x07A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x07A8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Equiped_item;                                      // 0x07C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C4[0x4];                                      // 0x07C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UChildActorComponent*>           Equip;                                             // 0x07C8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Cooldown_Active_;                                  // 0x07D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Vision;                                            // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   hands;                                             // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Eye_of_reach_ammo_count;                           // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flintlock_ammo_count;                              // 0x07F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_scoped;                                         // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Health;                                    // 0x0800(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ADS;                                               // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sniper_Sensitivity;                                // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sens2;                                             // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Eyeofreachsight;                                   // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ArrowRefrence;                                     // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          animdone;                                          // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Weapon_placement;                                  // 0x0838(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsADS;                                             // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Finalrot;                                          // 0x0858(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Introt;                                            // 0x0870(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        maxswaydegree;                                     // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlintlockSens;                                     // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blunderbuss_Sens;                                  // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Char_REF;                                          // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A1[0x7];                                      // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EyeOfReach_Reload_speed;                           // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flintlock_Reload_speed;                            // 0x08B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blunderbuss_Reload_speed;                          // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGusAnimBpNew_C*                        Animation_ref;                                     // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewVar_0;                                          // 0x08C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Right_yaw_limit;                                   // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Headyaw;                                           // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EC[0x4];                                      // 0x08EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        leftyawlimit;                                      // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Y__Pitch_;                                // 0x08F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                gun_offset;                                        // 0x0900(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        setserverupsens;                                   // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void WeaponSway(double Delta_Time);
	void UserConstructionScript();
	void Update_Head_rotation();
	void UnBlunderADS();
	void UnAimDownSight();
	void Un_Eye_of_reach_ads();
	void Toggle_Invert();
	void Timeline_6__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void thirdpersonperspective();
	void ThirdPerson_activate();
	void Stop_sprint();
	void Start_sprint();
	void Server_weapon_change();
	void Server_Run_Stop();
	void server_run_start();
	void Server_Flintlock_spawn();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void Perspective_function();
	void On_Pant(const class FString& Pant);
	void looking_up_and_down_server(float Val);
	void Line_trace_client();
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void _Left_Mouse_K2Node_InputAxisEvent_16(float AxisValue);
	void _Left_Gamepad_K2Node_InputAxisEvent_15(float AxisValue);
	void _Left_K2Node_InputAxisEvent_19(float AxisValue);
	void _Backward_K2Node_InputAxisEvent_14(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_3(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_17(float AxisValue);
	void _Down_Gamepad_K2Node_InputAxisEvent_18(float AxisValue);
	void InpActEvt_X_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Toggle_Perspective_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Fire_weapon_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Aim_down_sight_K2Node_InputActionEvent_0(const struct FKey& Key);
	void HitscanEyeOfReach();
	void Health(class AActor* self2, double B);
	void firstpersonperspective();
	void FirstPerson_activate();
	void eye_of_sus();
	void Eye_of_Reach_Sway(double Delta_Time);
	void Eye_of_reach_ads();
	void ExecuteUbergraph_GusPlayer(int32 EntryPoint);
	void Equip_weapon(TArray<class UChildActorComponent*>& Array);
	void Death_Replication();
	void Death(class APlayerController* PlayerController);
	void CorrectPitch_multicast(const struct FRotator& Rotation_0);
	void Correct_pitch(const struct FRotator& Rotation_0);
	void CharacterVariables();
	void Blunderbuss_Sway(double Delta_Time);
	void Blunderbuss_projectile_spawn();
	void BlunderADS();
	void airshotting();
	void Aimdownsus__UpdateFunc();
	void Aimdownsus__FinishedFunc();
	void AimDownSight();
	void AimdownPorridge__UpdateFunc();
	void AimdownPorridge__FinishedFunc();
	void AimDownBruh();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GusPlayer_C">();
	}
	static class AGusPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGusPlayer_C>();
	}
};
static_assert(alignof(AGusPlayer_C) == 0x000010, "Wrong alignment on AGusPlayer_C");
static_assert(sizeof(AGusPlayer_C) == 0x000920, "Wrong size on AGusPlayer_C");
static_assert(offsetof(AGusPlayer_C, UberGraphFrame) == 0x000600, "Member 'AGusPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, hands1) == 0x000608, "Member 'AGusPlayer_C::hands1' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, BP_EyeOfReach) == 0x000610, "Member 'AGusPlayer_C::BP_EyeOfReach' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, bp_BLUNDERBUS) == 0x000618, "Member 'AGusPlayer_C::bp_BLUNDERBUS' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, BP_Flintlock) == 0x000620, "Member 'AGusPlayer_C::BP_Flintlock' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Pivot) == 0x000628, "Member 'AGusPlayer_C::Pivot' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, FirstPersonCamera) == 0x000630, "Member 'AGusPlayer_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Scene) == 0x000638, "Member 'AGusPlayer_C::Scene' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Eyeofrreach_pooint) == 0x000640, "Member 'AGusPlayer_C::Eyeofrreach_pooint' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Flintlock_point) == 0x000648, "Member 'AGusPlayer_C::Flintlock_point' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Blunder_point) == 0x000650, "Member 'AGusPlayer_C::Blunder_point' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, HandPoint) == 0x000658, "Member 'AGusPlayer_C::HandPoint' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, blunderbuss_fireing_Cue) == 0x000660, "Member 'AGusPlayer_C::blunderbuss_fireing_Cue' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow11) == 0x000668, "Member 'AGusPlayer_C::Arrow11' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow10) == 0x000670, "Member 'AGusPlayer_C::Arrow10' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow9) == 0x000678, "Member 'AGusPlayer_C::Arrow9' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow8) == 0x000680, "Member 'AGusPlayer_C::Arrow8' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow7) == 0x000688, "Member 'AGusPlayer_C::Arrow7' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow6) == 0x000690, "Member 'AGusPlayer_C::Arrow6' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow5) == 0x000698, "Member 'AGusPlayer_C::Arrow5' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow4) == 0x0006A0, "Member 'AGusPlayer_C::Arrow4' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow3) == 0x0006A8, "Member 'AGusPlayer_C::Arrow3' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow2) == 0x0006B0, "Member 'AGusPlayer_C::Arrow2' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Holder) == 0x0006B8, "Member 'AGusPlayer_C::Holder' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, flintlockshot_Cue) == 0x0006C0, "Member 'AGusPlayer_C::flintlockshot_Cue' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Arrow1) == 0x0006C8, "Member 'AGusPlayer_C::Arrow1' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, ThirdPersonCamera) == 0x0006D0, "Member 'AGusPlayer_C::ThirdPersonCamera' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, CameraBoom) == 0x0006D8, "Member 'AGusPlayer_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_6_AimDownHomer_183E173A494E9BD952BBAAB564AEF86E) == 0x0006E0, "Member 'AGusPlayer_C::Timeline_6_AimDownHomer_183E173A494E9BD952BBAAB564AEF86E' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_6__Direction_183E173A494E9BD952BBAAB564AEF86E) == 0x0006E4, "Member 'AGusPlayer_C::Timeline_6__Direction_183E173A494E9BD952BBAAB564AEF86E' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_6) == 0x0006E8, "Member 'AGusPlayer_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_5_AimDownHomer_E7D614054373CC3A99610AA20F4E70BD) == 0x0006F0, "Member 'AGusPlayer_C::Timeline_5_AimDownHomer_E7D614054373CC3A99610AA20F4E70BD' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_5__Direction_E7D614054373CC3A99610AA20F4E70BD) == 0x0006F4, "Member 'AGusPlayer_C::Timeline_5__Direction_E7D614054373CC3A99610AA20F4E70BD' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_5) == 0x0006F8, "Member 'AGusPlayer_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_3_AimDownHomer_180F6BEB4E57ED5ADB367BA80CE58F26) == 0x000700, "Member 'AGusPlayer_C::Timeline_3_AimDownHomer_180F6BEB4E57ED5ADB367BA80CE58F26' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_3__Direction_180F6BEB4E57ED5ADB367BA80CE58F26) == 0x000704, "Member 'AGusPlayer_C::Timeline_3__Direction_180F6BEB4E57ED5ADB367BA80CE58F26' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_3) == 0x000708, "Member 'AGusPlayer_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_1_AimDownHomer_E3265CCA4902CFDA9050B0AC60E95F3D) == 0x000710, "Member 'AGusPlayer_C::Timeline_1_AimDownHomer_E3265CCA4902CFDA9050B0AC60E95F3D' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_1__Direction_E3265CCA4902CFDA9050B0AC60E95F3D) == 0x000714, "Member 'AGusPlayer_C::Timeline_1__Direction_E3265CCA4902CFDA9050B0AC60E95F3D' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_1) == 0x000718, "Member 'AGusPlayer_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_0_AimDownHomer_2A1DD41441B7AE0497A7FDBBB50C99A0) == 0x000720, "Member 'AGusPlayer_C::Timeline_0_AimDownHomer_2A1DD41441B7AE0497A7FDBBB50C99A0' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_0__Direction_2A1DD41441B7AE0497A7FDBBB50C99A0) == 0x000724, "Member 'AGusPlayer_C::Timeline_0__Direction_2A1DD41441B7AE0497A7FDBBB50C99A0' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_0) == 0x000728, "Member 'AGusPlayer_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, AimdownPorridge_AimDownHomer_23611F7C407AFEFB1128C992167ADD8A) == 0x000730, "Member 'AGusPlayer_C::AimdownPorridge_AimDownHomer_23611F7C407AFEFB1128C992167ADD8A' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, AimdownPorridge__Direction_23611F7C407AFEFB1128C992167ADD8A) == 0x000734, "Member 'AGusPlayer_C::AimdownPorridge__Direction_23611F7C407AFEFB1128C992167ADD8A' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, AimdownPorridge) == 0x000738, "Member 'AGusPlayer_C::AimdownPorridge' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_2_NewTrack_0_8BFDDFD947C3631D26D49B9430DE34DF) == 0x000740, "Member 'AGusPlayer_C::Timeline_2_NewTrack_0_8BFDDFD947C3631D26D49B9430DE34DF' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_2__Direction_8BFDDFD947C3631D26D49B9430DE34DF) == 0x000744, "Member 'AGusPlayer_C::Timeline_2__Direction_8BFDDFD947C3631D26D49B9430DE34DF' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_2) == 0x000748, "Member 'AGusPlayer_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_4_NewTrack_0_EA5A45FC42105582BD18C98BC3DCFF5B) == 0x000750, "Member 'AGusPlayer_C::Timeline_4_NewTrack_0_EA5A45FC42105582BD18C98BC3DCFF5B' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_4__Direction_EA5A45FC42105582BD18C98BC3DCFF5B) == 0x000754, "Member 'AGusPlayer_C::Timeline_4__Direction_EA5A45FC42105582BD18C98BC3DCFF5B' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Timeline_4) == 0x000758, "Member 'AGusPlayer_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Aimdownsus_NewTrack_0_054432AA486851572A52908AF9F6C4AA) == 0x000760, "Member 'AGusPlayer_C::Aimdownsus_NewTrack_0_054432AA486851572A52908AF9F6C4AA' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Aimdownsus__Direction_054432AA486851572A52908AF9F6C4AA) == 0x000764, "Member 'AGusPlayer_C::Aimdownsus__Direction_054432AA486851572A52908AF9F6C4AA' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Aimdownsus) == 0x000768, "Member 'AGusPlayer_C::Aimdownsus' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, TurnRateGamepad) == 0x000770, "Member 'AGusPlayer_C::TurnRateGamepad' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, WalkSpeed) == 0x000778, "Member 'AGusPlayer_C::WalkSpeed' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, SprintSpeed) == 0x000780, "Member 'AGusPlayer_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, MenuRef) == 0x000788, "Member 'AGusPlayer_C::MenuRef' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, invert_value) == 0x000790, "Member 'AGusPlayer_C::invert_value' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Inverted_) == 0x000798, "Member 'AGusPlayer_C::Inverted_' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Sens) == 0x0007A0, "Member 'AGusPlayer_C::Sens' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Rotation) == 0x0007A8, "Member 'AGusPlayer_C::Rotation' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Equiped_item) == 0x0007C0, "Member 'AGusPlayer_C::Equiped_item' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Equip) == 0x0007C8, "Member 'AGusPlayer_C::Equip' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Cooldown_Active_) == 0x0007D8, "Member 'AGusPlayer_C::Cooldown_Active_' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Vision) == 0x0007E0, "Member 'AGusPlayer_C::Vision' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, hands) == 0x0007E8, "Member 'AGusPlayer_C::hands' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Eye_of_reach_ammo_count) == 0x0007F0, "Member 'AGusPlayer_C::Eye_of_reach_ammo_count' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Flintlock_ammo_count) == 0x0007F4, "Member 'AGusPlayer_C::Flintlock_ammo_count' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Is_scoped) == 0x0007F8, "Member 'AGusPlayer_C::Is_scoped' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Current_Health) == 0x000800, "Member 'AGusPlayer_C::Current_Health' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, ADS) == 0x000808, "Member 'AGusPlayer_C::ADS' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Sniper_Sensitivity) == 0x000810, "Member 'AGusPlayer_C::Sniper_Sensitivity' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Sens2) == 0x000818, "Member 'AGusPlayer_C::Sens2' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Eyeofreachsight) == 0x000820, "Member 'AGusPlayer_C::Eyeofreachsight' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, ArrowRefrence) == 0x000828, "Member 'AGusPlayer_C::ArrowRefrence' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, animdone) == 0x000830, "Member 'AGusPlayer_C::animdone' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Weapon_placement) == 0x000838, "Member 'AGusPlayer_C::Weapon_placement' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, IsADS) == 0x000850, "Member 'AGusPlayer_C::IsADS' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Finalrot) == 0x000858, "Member 'AGusPlayer_C::Finalrot' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Introt) == 0x000870, "Member 'AGusPlayer_C::Introt' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, maxswaydegree) == 0x000888, "Member 'AGusPlayer_C::maxswaydegree' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, FlintlockSens) == 0x000890, "Member 'AGusPlayer_C::FlintlockSens' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Blunderbuss_Sens) == 0x000898, "Member 'AGusPlayer_C::Blunderbuss_Sens' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Char_REF) == 0x0008A0, "Member 'AGusPlayer_C::Char_REF' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, EyeOfReach_Reload_speed) == 0x0008A8, "Member 'AGusPlayer_C::EyeOfReach_Reload_speed' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Flintlock_Reload_speed) == 0x0008B0, "Member 'AGusPlayer_C::Flintlock_Reload_speed' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Blunderbuss_Reload_speed) == 0x0008B8, "Member 'AGusPlayer_C::Blunderbuss_Reload_speed' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Animation_ref) == 0x0008C0, "Member 'AGusPlayer_C::Animation_ref' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, NewVar_0) == 0x0008C8, "Member 'AGusPlayer_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Right_yaw_limit) == 0x0008E0, "Member 'AGusPlayer_C::Right_yaw_limit' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Headyaw) == 0x0008E8, "Member 'AGusPlayer_C::Headyaw' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, leftyawlimit) == 0x0008F0, "Member 'AGusPlayer_C::leftyawlimit' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, Rotation_Y__Pitch_) == 0x0008F8, "Member 'AGusPlayer_C::Rotation_Y__Pitch_' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, gun_offset) == 0x000900, "Member 'AGusPlayer_C::gun_offset' has a wrong offset!");
static_assert(offsetof(AGusPlayer_C, setserverupsens) == 0x000918, "Member 'AGusPlayer_C::setserverupsens' has a wrong offset!");

}

