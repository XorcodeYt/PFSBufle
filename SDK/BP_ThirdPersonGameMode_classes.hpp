#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ThirdPersonGameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AdvancedSessions_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ThirdPersonGameMode.BP_ThirdPersonGameMode_C
// 0x01D8 (0x04F0 - 0x0318)
class ABP_ThirdPersonGameMode_C final : public AGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Ask_Everyone_to_title;                             // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ATrainGusPlayer_C*>              Everybody;                                         // 0x0338(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   GameMode;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RedScore;                                          // 0x0350(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlueScore;                                         // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              RedDepositer;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              FFA_Score_Checker;                                 // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class APlayerState*>                   Defeated_Players;                                  // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FString                                 Session_Gamemode;                                  // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Host_Has_Started_The_Match;                        // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              The_Match_Has_Ended;                               // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Banned_Players;                                    // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         List_of_Banned_Players;                            // 0x03C0(0x0010)(Edit, BlueprintVisible, Net)
	int32                                         RedPlayers;                                        // 0x03D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BluePlayers;                                       // 0x03D4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Bring_the_Countdown;                               // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                Spawn_Transform_Location;                          // 0x03E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class APlayerStateBP_C*, bool>           VoteKickMap;                                       // 0x0400(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          OngoingVote_;                                      // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         YesVotes;                                          // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NoVotes;                                           // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kick_;                                             // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45D[0x3];                                      // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Player_name;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class APlayerState*                           Accused;                                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Counter;                                           // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0480(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          D_Vote_;                                           // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              KoTC_Score_Checker;                                // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ATrainGusPlayer_C*>              Don_t_have_it_array;                               // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ATrainGusPlayer_C*>              Those_who_know;                                    // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          I_got_one_lad;                                     // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATrainGusPlayer_C*>              Don_t_have_it_array_0;                             // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        KoTC_Timer;                                        // 0x04E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void Match_End();
	void LogOn_ed();
	void Kickfart(const class FString& PlayerName, bool Kick__0, const class FText& Text_0, const class FText& ThoseWhoKnow);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void Just_Possesed_Pawn(class APawn* Pawn);
	void Is_The_Cannon_Among_Us();
	void Host_Start();
	void Give_me_a_team(class APlayerController* Player_Controller);
	void Give_Everyone_Countdown(const class FString& Map);
	void ExecuteUbergraph_BP_ThirdPersonGameMode(int32 EntryPoint);
	void End_Game();
	void Announce_Winner(class APlayerStateBP_C* Winning_Player);
	void Add_Red();
	void Add_Blue();
	void VoteUpdate(int32 Ay, int32 Ny);
	bool Verify(const class FText& InText);
	void User_asked_for_vote_info(class APlayerState* Player_State);
	void UpdateKickFart();
	void Update_TDM_Score();
	void Update_on_Kill();
	void Update_KoTC_score(double Time);
	void Title_Giver_Gamemode();
	void SomeoneVoted(const class FText& PersonWhoVoted, bool TheirVote, class APlayerStateBP_C* Player_State);
	void Score_Checker();
	void Red_Deposit(class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ThirdPersonGameMode_C">();
	}
	static class ABP_ThirdPersonGameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ThirdPersonGameMode_C>();
	}
};
static_assert(alignof(ABP_ThirdPersonGameMode_C) == 0x000008, "Wrong alignment on ABP_ThirdPersonGameMode_C");
static_assert(sizeof(ABP_ThirdPersonGameMode_C) == 0x0004F0, "Wrong size on ABP_ThirdPersonGameMode_C");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, UberGraphFrame) == 0x000318, "Member 'ABP_ThirdPersonGameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, DefaultSceneRoot) == 0x000320, "Member 'ABP_ThirdPersonGameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Ask_Everyone_to_title) == 0x000328, "Member 'ABP_ThirdPersonGameMode_C::Ask_Everyone_to_title' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Everybody) == 0x000338, "Member 'ABP_ThirdPersonGameMode_C::Everybody' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, GameMode) == 0x000348, "Member 'ABP_ThirdPersonGameMode_C::GameMode' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, RedScore) == 0x000350, "Member 'ABP_ThirdPersonGameMode_C::RedScore' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, BlueScore) == 0x000354, "Member 'ABP_ThirdPersonGameMode_C::BlueScore' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, RedDepositer) == 0x000358, "Member 'ABP_ThirdPersonGameMode_C::RedDepositer' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, FFA_Score_Checker) == 0x000368, "Member 'ABP_ThirdPersonGameMode_C::FFA_Score_Checker' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Defeated_Players) == 0x000378, "Member 'ABP_ThirdPersonGameMode_C::Defeated_Players' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Session_Gamemode) == 0x000388, "Member 'ABP_ThirdPersonGameMode_C::Session_Gamemode' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Host_Has_Started_The_Match) == 0x000398, "Member 'ABP_ThirdPersonGameMode_C::Host_Has_Started_The_Match' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, The_Match_Has_Ended) == 0x0003A8, "Member 'ABP_ThirdPersonGameMode_C::The_Match_Has_Ended' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Banned_Players) == 0x0003B8, "Member 'ABP_ThirdPersonGameMode_C::Banned_Players' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, List_of_Banned_Players) == 0x0003C0, "Member 'ABP_ThirdPersonGameMode_C::List_of_Banned_Players' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, RedPlayers) == 0x0003D0, "Member 'ABP_ThirdPersonGameMode_C::RedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, BluePlayers) == 0x0003D4, "Member 'ABP_ThirdPersonGameMode_C::BluePlayers' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Bring_the_Countdown) == 0x0003D8, "Member 'ABP_ThirdPersonGameMode_C::Bring_the_Countdown' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Spawn_Transform_Location) == 0x0003E8, "Member 'ABP_ThirdPersonGameMode_C::Spawn_Transform_Location' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, VoteKickMap) == 0x000400, "Member 'ABP_ThirdPersonGameMode_C::VoteKickMap' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, OngoingVote_) == 0x000450, "Member 'ABP_ThirdPersonGameMode_C::OngoingVote_' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, YesVotes) == 0x000454, "Member 'ABP_ThirdPersonGameMode_C::YesVotes' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, NoVotes) == 0x000458, "Member 'ABP_ThirdPersonGameMode_C::NoVotes' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Kick_) == 0x00045C, "Member 'ABP_ThirdPersonGameMode_C::Kick_' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Player_name) == 0x000460, "Member 'ABP_ThirdPersonGameMode_C::Player_name' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Accused) == 0x000470, "Member 'ABP_ThirdPersonGameMode_C::Accused' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Counter) == 0x000478, "Member 'ABP_ThirdPersonGameMode_C::Counter' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Text) == 0x000480, "Member 'ABP_ThirdPersonGameMode_C::Text' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, D_Vote_) == 0x000498, "Member 'ABP_ThirdPersonGameMode_C::D_Vote_' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, KoTC_Score_Checker) == 0x0004A0, "Member 'ABP_ThirdPersonGameMode_C::KoTC_Score_Checker' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Don_t_have_it_array) == 0x0004B0, "Member 'ABP_ThirdPersonGameMode_C::Don_t_have_it_array' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Those_who_know) == 0x0004C0, "Member 'ABP_ThirdPersonGameMode_C::Those_who_know' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, I_got_one_lad) == 0x0004D0, "Member 'ABP_ThirdPersonGameMode_C::I_got_one_lad' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, Don_t_have_it_array_0) == 0x0004D8, "Member 'ABP_ThirdPersonGameMode_C::Don_t_have_it_array_0' has a wrong offset!");
static_assert(offsetof(ABP_ThirdPersonGameMode_C, KoTC_Timer) == 0x0004E8, "Member 'ABP_ThirdPersonGameMode_C::KoTC_Timer' has a wrong offset!");

}

