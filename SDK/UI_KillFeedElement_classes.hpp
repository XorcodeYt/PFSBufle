#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_KillFeedElement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "BP_WidgetAligmentStruct_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_KillFeedElement.UI_KillFeedElement_C
// 0x00C8 (0x0358 - 0x0290)
class UUI_KillFeedElement_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OpenLeft;                                          // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Close;                                             // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OpenRight;                                         // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             KillerName;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 KillIcon;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             VictimName;                                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        TargetY;                                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LifeTime;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateFontInfo                         FontSettings;                                      // 0x02D8(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              IconSize;                                          // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EBP_WidgetAligmentStruct                      Alignment;                                         // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            IconColor;                                         // 0x0344(0x0014)(Edit, BlueprintVisible)

public:
	void OpenAnimation(double* AnimationLength);
	void Init(const class FText& KillerName_0, const struct FSlateColor& KillerNameColor, const class FText& VictimName_0, const struct FSlateColor& VictimNameColor, class UTexture2D* Icon, const struct FSlateColor& IconColor_0);
	void ExecuteUbergraph_UI_KillFeedElement(int32 EntryPoint);
	void Construct();
	void CloseAnimation(double* AnimationLength);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_KillFeedElement_C">();
	}
	static class UUI_KillFeedElement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_KillFeedElement_C>();
	}
};
static_assert(alignof(UUI_KillFeedElement_C) == 0x000008, "Wrong alignment on UUI_KillFeedElement_C");
static_assert(sizeof(UUI_KillFeedElement_C) == 0x000358, "Wrong size on UUI_KillFeedElement_C");
static_assert(offsetof(UUI_KillFeedElement_C, UberGraphFrame) == 0x000290, "Member 'UUI_KillFeedElement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, OpenLeft) == 0x000298, "Member 'UUI_KillFeedElement_C::OpenLeft' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, Close) == 0x0002A0, "Member 'UUI_KillFeedElement_C::Close' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, OpenRight) == 0x0002A8, "Member 'UUI_KillFeedElement_C::OpenRight' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, KillerName) == 0x0002B0, "Member 'UUI_KillFeedElement_C::KillerName' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, KillIcon) == 0x0002B8, "Member 'UUI_KillFeedElement_C::KillIcon' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, VictimName) == 0x0002C0, "Member 'UUI_KillFeedElement_C::VictimName' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, TargetY) == 0x0002C8, "Member 'UUI_KillFeedElement_C::TargetY' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, LifeTime) == 0x0002D0, "Member 'UUI_KillFeedElement_C::LifeTime' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, FontSettings) == 0x0002D8, "Member 'UUI_KillFeedElement_C::FontSettings' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, IconSize) == 0x000330, "Member 'UUI_KillFeedElement_C::IconSize' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, Alignment) == 0x000340, "Member 'UUI_KillFeedElement_C::Alignment' has a wrong offset!");
static_assert(offsetof(UUI_KillFeedElement_C, IconColor) == 0x000344, "Member 'UUI_KillFeedElement_C::IconColor' has a wrong offset!");

}

