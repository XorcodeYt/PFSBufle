#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StarterSpectate2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AdvancedSessions_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass StarterSpectate2.StarterSpectate2_C
// 0x01B0 (0x04D0 - 0x0320)
class AStarterSpectate2_C final : public ASpectatorPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Pivot;                                             // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Dead_Fov_Alpha_C9306C394E41D41C8A61DBABD32079D5;   // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Dead_Fov__Direction_C9306C394E41D41C8A61DBABD32079D5; // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Dead_Fov;                                          // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnPoint_Dock1;                                  // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnPoint_Dock2;                                  // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Killed_By_ActorRef;                                // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              BorderHudAnim;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Condition;                                         // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Followcam_;                                        // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Menuabler_;                                        // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMenuOn;                                          // 0x039B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team;                                              // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Equipped_weapon;                                   // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Equipped_weapon_2;                                 // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   Player_Title;                                      // 0x03A8(0x0018)(Edit, BlueprintVisible, Net, ExposeOnSpawn)
	class ATrainGusPlayer_C*                      Gusref;                                            // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CTF_Red_Score;                                     // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CTF_Blue_Score;                                    // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AHUD_BP_C*                              HudRef;                                            // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kills;                                             // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnPoint_Tutorial_Island_1;                      // 0x03E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnPoint_Tutorial_Island_2;                      // 0x03F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spire_Hills;                                       // 0x0410(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spire_Rear;                                        // 0x0428(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TDMER_Cannon_1;                                    // 0x0440(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TDMER_Cannon_2;                                    // 0x0458(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TDMER_Fort_1;                                      // 0x0470(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TDMER_Fort_2;                                      // 0x0488(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spire_1;                                           // 0x04A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spire_2;                                           // 0x04B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Title_Verification(const class FText& Title, class AStarterSpectate2_C* User);
	void Spawn_The_Widgets(class APlayerController* OwningPlayer);
	void Spawn_Gus_Tutorial_Island(class AController* Target, int32 My_team, class APlayerController* PlayerController, int32 Hat, int32 Title, int32 Equipped_weapon_0, int32 EquippedWeapon2, class APlayerState* Player_State, int32 Skin_Number);
	void Spawn_Gus_The_Spire_Docks(class AController* Target, int32 My_team, class APlayerController* PlayerController, int32 Hat, int32 Title, int32 Equipped_weapon_0, int32 EquippedWeapon2, class APlayerState* Player_State, int32 Skin_Number, const struct FVector& Spawn_Transform_Location);
	void Spawn_Gus_The_spire_client(const struct FVector& Spawn_Transform_Location);
	void Spawn_Gus_TDMer_Island(class AController* Target, int32 My_team, class APlayerController* PlayerController, int32 Hat, int32 Title, int32 Weapon_1, int32 Weapon_2, class APlayerState* Player_State, int32 Skin_Number);
	void Salamandrew();
	void ReceiveTick(float DeltaSeconds);
	void ReceivePossessed(class AController* NewController);
	void Player_Joins(class AStarterSpectate2_C* Target);
	void Facing_Forts(class AController* Target, int32 My_team, class APlayerController* PlayerController, int32 Hat, int32 Title, int32 Weapon_1, int32 Weapon_2, class APlayerState* Player_State, int32 Skin_Number);
	void ExecuteUbergraph_StarterSpectate2(int32 EntryPoint);
	void Dead_Fov__UpdateFunc();
	void Dead_Fov__FinishedFunc();
	void Create_The_menu_widget(class APlayerController* OwningPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"StarterSpectate2_C">();
	}
	static class AStarterSpectate2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStarterSpectate2_C>();
	}
};
static_assert(alignof(AStarterSpectate2_C) == 0x000008, "Wrong alignment on AStarterSpectate2_C");
static_assert(sizeof(AStarterSpectate2_C) == 0x0004D0, "Wrong size on AStarterSpectate2_C");
static_assert(offsetof(AStarterSpectate2_C, UberGraphFrame) == 0x000320, "Member 'AStarterSpectate2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Pivot) == 0x000328, "Member 'AStarterSpectate2_C::Pivot' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, SpringArm) == 0x000330, "Member 'AStarterSpectate2_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Camera) == 0x000338, "Member 'AStarterSpectate2_C::Camera' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Dead_Fov_Alpha_C9306C394E41D41C8A61DBABD32079D5) == 0x000340, "Member 'AStarterSpectate2_C::Dead_Fov_Alpha_C9306C394E41D41C8A61DBABD32079D5' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Dead_Fov__Direction_C9306C394E41D41C8A61DBABD32079D5) == 0x000344, "Member 'AStarterSpectate2_C::Dead_Fov__Direction_C9306C394E41D41C8A61DBABD32079D5' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Dead_Fov) == 0x000348, "Member 'AStarterSpectate2_C::Dead_Fov' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, SpawnPoint_Dock1) == 0x000350, "Member 'AStarterSpectate2_C::SpawnPoint_Dock1' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, SpawnPoint_Dock2) == 0x000368, "Member 'AStarterSpectate2_C::SpawnPoint_Dock2' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Killed_By_ActorRef) == 0x000380, "Member 'AStarterSpectate2_C::Killed_By_ActorRef' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, BorderHudAnim) == 0x000388, "Member 'AStarterSpectate2_C::BorderHudAnim' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Condition) == 0x000398, "Member 'AStarterSpectate2_C::Condition' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Followcam_) == 0x000399, "Member 'AStarterSpectate2_C::Followcam_' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Menuabler_) == 0x00039A, "Member 'AStarterSpectate2_C::Menuabler_' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, IsMenuOn) == 0x00039B, "Member 'AStarterSpectate2_C::IsMenuOn' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Team) == 0x00039C, "Member 'AStarterSpectate2_C::Team' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Equipped_weapon) == 0x0003A0, "Member 'AStarterSpectate2_C::Equipped_weapon' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Equipped_weapon_2) == 0x0003A4, "Member 'AStarterSpectate2_C::Equipped_weapon_2' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Player_Title) == 0x0003A8, "Member 'AStarterSpectate2_C::Player_Title' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Gusref) == 0x0003C0, "Member 'AStarterSpectate2_C::Gusref' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, CTF_Red_Score) == 0x0003C8, "Member 'AStarterSpectate2_C::CTF_Red_Score' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, CTF_Blue_Score) == 0x0003CC, "Member 'AStarterSpectate2_C::CTF_Blue_Score' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, HudRef) == 0x0003D0, "Member 'AStarterSpectate2_C::HudRef' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Kills) == 0x0003D8, "Member 'AStarterSpectate2_C::Kills' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, SpawnPoint_Tutorial_Island_1) == 0x0003E0, "Member 'AStarterSpectate2_C::SpawnPoint_Tutorial_Island_1' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, SpawnPoint_Tutorial_Island_2) == 0x0003F8, "Member 'AStarterSpectate2_C::SpawnPoint_Tutorial_Island_2' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Spire_Hills) == 0x000410, "Member 'AStarterSpectate2_C::Spire_Hills' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Spire_Rear) == 0x000428, "Member 'AStarterSpectate2_C::Spire_Rear' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, TDMER_Cannon_1) == 0x000440, "Member 'AStarterSpectate2_C::TDMER_Cannon_1' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, TDMER_Cannon_2) == 0x000458, "Member 'AStarterSpectate2_C::TDMER_Cannon_2' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, TDMER_Fort_1) == 0x000470, "Member 'AStarterSpectate2_C::TDMER_Fort_1' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, TDMER_Fort_2) == 0x000488, "Member 'AStarterSpectate2_C::TDMER_Fort_2' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Spire_1) == 0x0004A0, "Member 'AStarterSpectate2_C::Spire_1' has a wrong offset!");
static_assert(offsetof(AStarterSpectate2_C, Spire_2) == 0x0004B8, "Member 'AStarterSpectate2_C::Spire_2' has a wrong offset!");

}

