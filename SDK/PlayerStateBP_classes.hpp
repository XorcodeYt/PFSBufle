#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerStateBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerStateBP.PlayerStateBP_C
// 0x00F8 (0x0488 - 0x0390)
class APlayerStateBP_C final : public APlayerState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Team;                                              // 0x03B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kills;                                             // 0x03B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Deaths;                                            // 0x03B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon_1;                                          // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon_2;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HatNumber;                                         // 0x03C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Title_Number;                                      // 0x03C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              SaveItems;                                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Menu_Closed;                                       // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              SavedItemChanged;                                  // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Skin_Number;                                       // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   List_of_Kills;                                     // 0x03F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Counter;                                           // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   List_of_Dominated_Players;                         // 0x0410(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class APlayerState*                           Killer;                                            // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerState*>                   Players_that_are_domming_me;                       // 0x0428(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate)
	class USaveGame*                              SaveOptions;                                       // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Kills;                                      // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATrainGusPlayer_C*                      Traingus_im_controlling;                           // 0x0448(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Pant_Type;                                         // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Ay;                                                // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ny;                                                // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HostName;                                          // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        TimeElapsed;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Held_crown_;                                       // 0x0480(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Select_A;                                          // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void VoteUpdate(int32 Ay_0, int32 Ny_0);
	void Vote_Update_Server(int32 Ay_0, int32 Ny_0);
	void Vote_Update_Client(int32 Ay_0, int32 Ny_0);
	void UpdateKickFart();
	void Update_TDM_Score();
	void Update_Kill();
	void Time_Start();
	void Tell_us_fella(class ATrainGusPlayer_C* Pawn);
	void Tell_Gamemode_Time();
	void Tell_GameMode_about_kill();
	void Sound_Bo_Bound_Client(int32 Sound_Number, class AActor* Spawner);
	void Sound_Bo_Bound(int32 Sound_Number, class AActor* Spawner);
	void SomeoneVoted(const class FText& PersonWhoVoted, bool TheirVote, class APlayerStateBP_C* Player_State);
	void Server_Change_Dom(class APlayerState* Killer_0, class APlayerState* Me);
	void Send_the_update_kick();
	void Return_the_vote_info_server(int32 Counter_0, bool Ongoing_vote_);
	void Return_the_vote_info(int32 Counter_0, bool Ongoing_vote_);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Player_Logged_on(int32 Title_Number_0, int32 HatNumber_0, int32 Skin_Number_0, int32 Weapon_1_0, int32 Weapon_2_0, const class FString& Pant);
	void OnSuccess_E5606583477427581FD4FAB3C2E7372F();
	void OnSuccess_C70FC785450A8C36D870348E477F51A3();
	void OnSuccess_B7F14CEF49C198C07A8662A19BE661C1(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_7BA732F14B82FF08652F1B85D34CB5BA();
	void OnSuccess_6DA32DB04B670646094AF1826A1C9B45(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_3A297D2F4F2023F322B06BA4812400F3();
	void OnSuccess_3809042940C9A278288688A21E93631C(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_364A0E194677C706731295BCC6A3C1C7(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_E5606583477427581FD4FAB3C2E7372F();
	void OnFailure_C70FC785450A8C36D870348E477F51A3();
	void OnFailure_B7F14CEF49C198C07A8662A19BE661C1(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_7BA732F14B82FF08652F1B85D34CB5BA();
	void OnFailure_6DA32DB04B670646094AF1826A1C9B45(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_3A297D2F4F2023F322B06BA4812400F3();
	void OnFailure_3809042940C9A278288688A21E93631C(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_364A0E194677C706731295BCC6A3C1C7(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void On_playercontroller_posessed();
	void Message_To_Send(class APlayerState* Player, const class FText& Text, const class FString& Param_Name_0);
	void LogOn_ed();
	void Locateinator(const struct FVector& Spawn_Transform_Location);
	void Kickfart_server(const class FString& PlayerName, bool Kick_, const class FText& Text, const class FText& ThoseWhoKnow);
	void Kickfart_brian(const class FString& PlayerName, bool Kick_, const class FText& Text);
	void Kickfart(const class FString& PlayerName, bool Kick_, const class FText& Text, const class FText& ThoseWhoKnow);
	void Just_Possesed_Pawn(class APawn* Pawn);
	void I_voted_Server(bool TheirVote, class APlayerStateBP_C* Player_State);
	void I_voted(class APlayerStateBP_C* Player_State, bool TheirVote);
	void I_just_Perished_Someone_Player_State(class APlayerState* Victim_Player_State);
	void Give_Killer_Kill_Confirm(class APlayerState* Victim_Player_State, class APlayerController* OwningPlayer, int32 Team_0, const class FText& Killed_player);
	void Get_totum(const struct FVector& Spawn_Transform_Location);
	void ExecuteUbergraph_PlayerStateBP(int32 EntryPoint);
	void Dommin(class APlayerState* Dommed, const class APlayerState*& Dommed_by);
	void Client_Change_Dom(const class APlayerState*& Me);
	void Change_Title(int32 NewParam);
	void Change_Skin(int32 Skin_Number_0);
	void Change_Pant(const class FString& PantType);
	void Change_Hat_Multicast(int32 HatNumber_0);
	void Change_Hat(int32 Hat);
	void Ask_for_vote_info_server(class APlayerState* Player_State);
	void Ask_for_vote_info(class APlayerState* Player_State);
	void Add_Kill(int32 Team_0, class APlayerState* Victim, const class UDamageType* Damage_Type, const class FText& Killed_player);
	void Add_Death(class APlayerState* Killer_0);
	void Add_Chungus_to_fart(class APlayerControllerBP_C* Target, class APlayerState* Victim, const class FText& Killed_player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerStateBP_C">();
	}
	static class APlayerStateBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerStateBP_C>();
	}
};
static_assert(alignof(APlayerStateBP_C) == 0x000008, "Wrong alignment on APlayerStateBP_C");
static_assert(sizeof(APlayerStateBP_C) == 0x000488, "Wrong size on APlayerStateBP_C");
static_assert(offsetof(APlayerStateBP_C, UberGraphFrame) == 0x000390, "Member 'APlayerStateBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, DefaultSceneRoot) == 0x000398, "Member 'APlayerStateBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Name_0) == 0x0003A0, "Member 'APlayerStateBP_C::Name_0' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Team) == 0x0003B0, "Member 'APlayerStateBP_C::Team' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Kills) == 0x0003B4, "Member 'APlayerStateBP_C::Kills' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Deaths) == 0x0003B8, "Member 'APlayerStateBP_C::Deaths' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Weapon_1) == 0x0003BC, "Member 'APlayerStateBP_C::Weapon_1' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Weapon_2) == 0x0003C0, "Member 'APlayerStateBP_C::Weapon_2' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, HatNumber) == 0x0003C4, "Member 'APlayerStateBP_C::HatNumber' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Title_Number) == 0x0003C8, "Member 'APlayerStateBP_C::Title_Number' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, SaveItems) == 0x0003D0, "Member 'APlayerStateBP_C::SaveItems' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Menu_Closed) == 0x0003D8, "Member 'APlayerStateBP_C::Menu_Closed' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, SavedItemChanged) == 0x0003E0, "Member 'APlayerStateBP_C::SavedItemChanged' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Skin_Number) == 0x0003F0, "Member 'APlayerStateBP_C::Skin_Number' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, List_of_Kills) == 0x0003F8, "Member 'APlayerStateBP_C::List_of_Kills' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Counter) == 0x000408, "Member 'APlayerStateBP_C::Counter' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, List_of_Dominated_Players) == 0x000410, "Member 'APlayerStateBP_C::List_of_Dominated_Players' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Killer) == 0x000420, "Member 'APlayerStateBP_C::Killer' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Players_that_are_domming_me) == 0x000428, "Member 'APlayerStateBP_C::Players_that_are_domming_me' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, SaveOptions) == 0x000438, "Member 'APlayerStateBP_C::SaveOptions' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Player_Kills) == 0x000440, "Member 'APlayerStateBP_C::Player_Kills' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Traingus_im_controlling) == 0x000448, "Member 'APlayerStateBP_C::Traingus_im_controlling' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Pant_Type) == 0x000450, "Member 'APlayerStateBP_C::Pant_Type' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Ay) == 0x000460, "Member 'APlayerStateBP_C::Ay' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Ny) == 0x000464, "Member 'APlayerStateBP_C::Ny' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, HostName) == 0x000468, "Member 'APlayerStateBP_C::HostName' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, TimeElapsed) == 0x000478, "Member 'APlayerStateBP_C::TimeElapsed' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Held_crown_) == 0x000480, "Member 'APlayerStateBP_C::Held_crown_' has a wrong offset!");
static_assert(offsetof(APlayerStateBP_C, Select_A) == 0x000481, "Member 'APlayerStateBP_C::Select_A' has a wrong offset!");

}

