#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RocketeerFunny

#include "Basic.hpp"

#include "RocketeerFunny_classes.hpp"
#include "RocketeerFunny_parameters.hpp"


namespace SDK
{

// Function RocketeerFunny.RocketeerFunny_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void ARocketeerFunny_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void ARocketeerFunny_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerTrimp
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   ServerTrimpImpulse                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ServerJumpImpulse                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ServerLateralImpulse                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ClientCalled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ServerTrimp(const struct FVector& ServerTrimpImpulse, double ServerJumpImpulse, double ServerLateralImpulse, bool ClientCalled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerTrimp");

	Params::RocketeerFunny_C_ServerTrimp Parms{};

	Parms.ServerTrimpImpulse = std::move(ServerTrimpImpulse);
	Parms.ServerJumpImpulse = ServerJumpImpulse;
	Parms.ServerLateralImpulse = ServerLateralImpulse;
	Parms.ClientCalled = ClientCalled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerResetFriction
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::ServerResetFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerResetFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerRemoveFriction
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::ServerRemoveFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerRemoveFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerMaxGround
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  SvrMaxAir                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ClientCalled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ServerMaxGround(double SvrMaxAir, bool ClientCalled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerMaxGround");

	Params::RocketeerFunny_C_ServerMaxGround Parms{};

	Parms.SvrMaxAir = SvrMaxAir;
	Parms.ClientCalled = ClientCalled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerMaxAir
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  SvrMaxAir                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    fromClient                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ServerMaxAir(double SvrMaxAir, bool fromClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerMaxAir");

	Params::RocketeerFunny_C_ServerMaxAir Parms{};

	Parms.SvrMaxAir = SvrMaxAir;
	Parms.fromClient = fromClient;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerFire
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::ServerFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerBhopCap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   ServerBhopCapVector                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ServerBhopCapSpeed                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ServerBhopCap(const struct FVector& ServerBhopCapVector, double ServerBhopCapSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerBhopCap");

	Params::RocketeerFunny_C_ServerBhopCap Parms{};

	Parms.ServerBhopCapVector = std::move(ServerBhopCapVector);
	Parms.ServerBhopCapSpeed = ServerBhopCapSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.ServerAddRampMomentum
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::ServerAddRampMomentum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ServerAddRampMomentum");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.Server is not moving
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::Server_is_not_moving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "Server is not moving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.Server is moving
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::Server_is_moving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "Server is moving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.resetFriction
// (Public, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::resetFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "resetFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.removeFriction
// (Public, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::removeFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "removeFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ReceiveTick");

	Params::RocketeerFunny_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ARocketeerFunny_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UDamageType*                DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ReceiveAnyDamage");

	Params::RocketeerFunny_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.rampSlide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ARocketeerFunny_C::rampSlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "rampSlide");

	Params::RocketeerFunny_C_rampSlide Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RocketeerFunny.RocketeerFunny_C.rampCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   onSlideableRamp                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 GroundAngleDotproduct                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::rampCheck(bool* onSlideableRamp, double* GroundAngleDotproduct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "rampCheck");

	Params::RocketeerFunny_C_rampCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (onSlideableRamp != nullptr)
		*onSlideableRamp = Parms.onSlideableRamp;

	if (GroundAngleDotproduct != nullptr)
		*GroundAngleDotproduct = Parms.GroundAngleDotproduct;
}


// Function RocketeerFunny.RocketeerFunny_C.OnRep_Rotation of Camera
// (BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::OnRep_Rotation_of_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "OnRep_Rotation of Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "K2_OnMovementModeChanged");

	Params::RocketeerFunny_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C. Left Mouse_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::_Left_Mouse_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", " Left Mouse_K2Node_InputAxisEvent_0");

	Params::RocketeerFunny_C__Left_Mouse_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C. Left_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::_Left_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", " Left_K2Node_InputAxisEvent_2");

	Params::RocketeerFunny_C__Left_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C. Backward_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::_Backward_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", " Backward_K2Node_InputAxisEvent_3");

	Params::RocketeerFunny_C__Backward_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C. Down Mouse_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::_Down_Mouse_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", " Down Mouse_K2Node_InputAxisEvent_1");

	Params::RocketeerFunny_C__Down_Mouse_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ARocketeerFunny_C::InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1");

	Params::RocketeerFunny_C_InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ARocketeerFunny_C::InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0");

	Params::RocketeerFunny_C_InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.InpActEvt_Jump_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ARocketeerFunny_C::InpActEvt_Jump_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "InpActEvt_Jump_K2Node_InputActionEvent_1");

	Params::RocketeerFunny_C_InpActEvt_Jump_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.InpActEvt_Jump_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ARocketeerFunny_C::InpActEvt_Jump_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "InpActEvt_Jump_K2Node_InputActionEvent_0");

	Params::RocketeerFunny_C_InpActEvt_Jump_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.hitmarker
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                OwningPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::hitmarker(class APlayerController* OwningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "hitmarker");

	Params::RocketeerFunny_C_hitmarker Parms{};

	Parms.OwningPlayer = OwningPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.ExecuteUbergraph_RocketeerFunny
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::ExecuteUbergraph_RocketeerFunny(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "ExecuteUbergraph_RocketeerFunny");

	Params::RocketeerFunny_C_ExecuteUbergraph_RocketeerFunny Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RocketeerFunny.RocketeerFunny_C.custom_jump
// (BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::custom_jump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "custom_jump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.applyTrimp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  groundDotProduct_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         trimpImpulse_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 trimpJumpImpulse_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 trimpLateralImpulse_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::applyTrimp(double groundDotProduct_0, struct FVector* trimpImpulse_0, double* trimpJumpImpulse_0, double* trimpLateralImpulse_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "applyTrimp");

	Params::RocketeerFunny_C_applyTrimp Parms{};

	Parms.groundDotProduct_0 = groundDotProduct_0;

	UObject::ProcessEvent(Func, &Parms);

	if (trimpImpulse_0 != nullptr)
		*trimpImpulse_0 = std::move(Parms.trimpImpulse_0);

	if (trimpJumpImpulse_0 != nullptr)
		*trimpJumpImpulse_0 = Parms.trimpJumpImpulse_0;

	if (trimpLateralImpulse_0 != nullptr)
		*trimpLateralImpulse_0 = Parms.trimpLateralImpulse_0;
}


// Function RocketeerFunny.RocketeerFunny_C.applyBhopCap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 bhopCapNewSpeed                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         bhopCapVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Applyingcap                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::applyBhopCap(double* bhopCapNewSpeed, struct FVector* bhopCapVector, bool* Applyingcap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "applyBhopCap");

	Params::RocketeerFunny_C_applyBhopCap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bhopCapNewSpeed != nullptr)
		*bhopCapNewSpeed = Parms.bhopCapNewSpeed;

	if (bhopCapVector != nullptr)
		*bhopCapVector = std::move(Parms.bhopCapVector);

	if (Applyingcap != nullptr)
		*Applyingcap = Parms.Applyingcap;
}


// Function RocketeerFunny.RocketeerFunny_C.addRampMomentum
// (Public, BlueprintCallable, BlueprintEvent)

void ARocketeerFunny_C::addRampMomentum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "addRampMomentum");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RocketeerFunny.RocketeerFunny_C.accelerateGround
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   forwardVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForwardAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   sideVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  sideAxis                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   prevVelocity_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         GroundAccelDir                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   applyingGroundAccel_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CalcMaxWalk                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::accelerateGround(const struct FVector& forwardVector, double ForwardAxis, const struct FVector& sideVector, double sideAxis, const struct FVector& prevVelocity_0, struct FVector* GroundAccelDir, bool* applyingGroundAccel_0, double* CalcMaxWalk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "accelerateGround");

	Params::RocketeerFunny_C_accelerateGround Parms{};

	Parms.forwardVector = std::move(forwardVector);
	Parms.ForwardAxis = ForwardAxis;
	Parms.sideVector = std::move(sideVector);
	Parms.sideAxis = sideAxis;
	Parms.prevVelocity_0 = std::move(prevVelocity_0);

	UObject::ProcessEvent(Func, &Parms);

	if (GroundAccelDir != nullptr)
		*GroundAccelDir = std::move(Parms.GroundAccelDir);

	if (applyingGroundAccel_0 != nullptr)
		*applyingGroundAccel_0 = Parms.applyingGroundAccel_0;

	if (CalcMaxWalk != nullptr)
		*CalcMaxWalk = Parms.CalcMaxWalk;
}


// Function RocketeerFunny.RocketeerFunny_C.accelerateAir
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   forwardVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForwardAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   sideVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  sideAxis                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 calcMaxAir                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         AirAccelDir                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   applyingAirAccel_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARocketeerFunny_C::accelerateAir(const struct FVector& forwardVector, double ForwardAxis, const struct FVector& sideVector, double sideAxis, double* calcMaxAir, struct FVector* AirAccelDir, bool* applyingAirAccel_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RocketeerFunny_C", "accelerateAir");

	Params::RocketeerFunny_C_accelerateAir Parms{};

	Parms.forwardVector = std::move(forwardVector);
	Parms.ForwardAxis = ForwardAxis;
	Parms.sideVector = std::move(sideVector);
	Parms.sideAxis = sideAxis;

	UObject::ProcessEvent(Func, &Parms);

	if (calcMaxAir != nullptr)
		*calcMaxAir = Parms.calcMaxAir;

	if (AirAccelDir != nullptr)
		*AirAccelDir = std::move(Parms.AirAccelDir);

	if (applyingAirAccel_0 != nullptr)
		*applyingAirAccel_0 = Parms.applyingAirAccel_0;
}

}

