#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerControllerBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AdvancedSessions_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerControllerBP.PlayerControllerBP_C
// 0x01C8 (0x0990 - 0x07C8)
class APlayerControllerBP_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Lock_Input_;                                       // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1[0x3];                                      // 0x07D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GameMode;                                          // 0x07D4(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Menu_;                                             // 0x07DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DD[0x3];                                      // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              UpdateFFAScoreboard_PC;                            // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UFFAScoreBoard_C*                       FFA_Scoreboard_ref;                                // 0x07F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHostStart_C*                           Start_Widget_blueprint;                            // 0x07F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpawnMenu_The_Spire_C*                 The_Spire_Spawner;                                 // 0x0800(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpawnMenu_TDMer_Island_C*              Tdmer_Island_Spawner;                              // 0x0808(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Authority;                                         // 0x0810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_811[0x7];                                      // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTDM_UI_C*                              TDM_Score_UI;                                      // 0x0818(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Server_Gamemode;                                   // 0x0820(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class Uhitmarker_C*                           hitmarker;                                         // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_gentlemen;                                     // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Open_Cosmetics;                                    // 0x0839(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Open_Weapons;                                      // 0x083A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Permitted;                                         // 0x083B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83C[0x4];                                      // 0x083C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFart_C*                                Fart_Ref;                                          // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChatBoxWidget_C*                       ChatBox;                                           // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              SaveOptions;                                       // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              SaveItems;                                         // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Title_Number;                                      // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HatNumber;                                         // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Skin_Number;                                       // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon_2;                                          // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon_1;                                          // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Update_Items;                                      // 0x0878(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USpawnMenu_FacingForts_C*               Facing_Forts_Island;                               // 0x0888(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDgus_C*                              HudGusRef;                                         // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Damage_Numbers;                                    // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_899[0x7];                                      // 0x0899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UScoreboard_C*                          ScoreboardRef;                                     // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Options_Updated;                                   // 0x08A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Text_Chat;                                         // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x3];                                      // 0x08B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team;                                              // 0x08BC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWinScreen_C*                           Win_Screen_var;                                    // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          On_Team_;                                          // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Display_Damage_Number_;                            // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8CA[0x6];                                      // 0x08CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CTransform;                                        // 0x08D0(0x0060)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 Pant_Type;                                         // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Ay;                                                // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ny;                                                // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Counter;                                           // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ongoing_vote_;                                     // 0x094C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameMenu_C*                            Menu_Ref;                                          // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Ugandan_chugnus;                                   // 0x0958(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Host_Name;                                         // 0x0968(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AWeatherSystem_BP_C*                    WeatherRef;                                        // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKoTCScoreBoard_C*                      KoTC_Ref;                                          // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Win_Widget_Server(class FName Winning_Player);
	void Win_Widget_Client(class FName Winning_Player);
	void who_hostin_server(const class FString& Host_Name_0);
	void who_hostin(const class FString& Host_Name_0);
	void Weather_System();
	void Updating_Items();
	void Update_TDM_Scoreboard_Server();
	void Update_TDM_Scoreboard_Client();
	void Update_Player_Count_Server();
	void Update_Player_Count_Client();
	void Update_KoTC_Sever(double Time);
	void Update_KoTC_Client(double Time);
	void Update_Kickfart_Server(const class FString& Name_0, bool Kick_, const class FText& Text, const class FText& Initiator);
	void Update_FFA_Scoreboard_Server();
	void Update_FFA_Scoreboard_Client();
	void The_Spire_Start_Server();
	void The_Spire_Start_Client();
	void Tell_Player_State_what_i_am(class APawn* Pawn_0);
	void Tell_game_to_give_a_team(class APlayerController* Player_Controller);
	void Start_doing(class APawn* Pawn_0);
	void Sound_Bo_Bound_Client(int32 Sound_Number, class AActor* Spawner);
	void Sound_Bo_Bound(int32 Sound_Number, class AActor* Spawner);
	void Set_Player_Controller_for_Gus(class APawn* Pawn_0);
	void Set_Gamemode_Client(class FName GameMode_0);
	void Server_hitmarker(class APlayerController* OwningPlayer, const struct FVector& Spawn_Transform_Location, double Damage, bool Display_Damage_Number__0);
	void Return_vote_info_server(int32 Counter_0, bool Ongoing_vote__0);
	void Return_vote_info(int32 Counter_0, bool Ongoing_vote__0);
	void Reset_Gamemode_Widget_Do_once();
	void Remove_Weather();
	void Remove_Menu();
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveBeginPlay();
	void Posses_dead_spectate(class AController* Target, class APawn* InPawn);
	void Outgoing_Message(const class FText& Message, class APlayerState* Player_State, const class FString& Name_0);
	void Open_Team_Switcher();
	void Open_Game_Menu(bool Open_Cosmetics_0, bool Open_Weapons_0);
	void On_Vanished(const struct FTransform& Transform, class ACharacter* Real);
	void On_Bannana(const struct FRotator& NewParam, class APlayerController* NewParam1);
	void Loss_Widget_Server(class FName Winning_Player);
	void Loss_Widget_Client(class FName Winning_Player);
	void Load_Settings();
	void Kill_Confirm_Widget(const class FText& Killed_player, int32 Team_0, class APlayerState* Victim_Player_State, class APlayerController* OwningPlayer);
	void Kickfart_Client(const class FString& Name_0, bool Kick_, const class FText& Text, const class FText& Initiator);
	void InpActEvt_V_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Tab_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Tab_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_F8_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Escape_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void Initiate_Random_Sounds();
	void I_voted(bool TheirVote);
	void Get_game_mode();
	void GameMode_Widgets();
	void Fart_for_me(const struct FRotator& NewRotation, class AController* Target);
	void ExecuteUbergraph_PlayerControllerBP(int32 EntryPoint);
	void Damage_Number_Doer(const struct FVector& Spawn_Transform_Location, double Damage);
	void Curcuitfar(const struct FRotator& NewRotation);
	void Create_Text_Box(class APlayerState* Owner_Player_State);
	void Create_countdown_Client(const class FString& GameMode_0, const class FString& Map, bool Has_authority);
	void Create_Countdown(const class FString& GameMode_0, const class FString& Map, bool Has_authority, class AController* Target);
	void Close_Menu_Gracefully();
	void Chat_Message(class APlayerState* Player_0, const class FText& Text, const class FString& Name_0);
	void Change_Skin(int32 Skin_Number_0);
	void Cannon_Skibidi(class AActor* DamagedActor, class AActor* DamageCauser);
	void Ask_gamemode_for_fart(const class FString& PlayerName, bool Kick_, const class FText& Text);
	void Ask_for_vote_info(class UGameMenu_C* MenuRef);
	void Add_Kill_To_Box_Server(class APlayerState* Victim, const class FText& Killed_player);
	void Add_Kill_To_Box_Client(class APlayerState* Victim, const class FText& Killed_player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerControllerBP_C">();
	}
	static class APlayerControllerBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerControllerBP_C>();
	}
};
static_assert(alignof(APlayerControllerBP_C) == 0x000010, "Wrong alignment on APlayerControllerBP_C");
static_assert(sizeof(APlayerControllerBP_C) == 0x000990, "Wrong size on APlayerControllerBP_C");
static_assert(offsetof(APlayerControllerBP_C, UberGraphFrame) == 0x0007C8, "Member 'APlayerControllerBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Lock_Input_) == 0x0007D0, "Member 'APlayerControllerBP_C::Lock_Input_' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, GameMode) == 0x0007D4, "Member 'APlayerControllerBP_C::GameMode' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Menu_) == 0x0007DC, "Member 'APlayerControllerBP_C::Menu_' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, UpdateFFAScoreboard_PC) == 0x0007E0, "Member 'APlayerControllerBP_C::UpdateFFAScoreboard_PC' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, FFA_Scoreboard_ref) == 0x0007F0, "Member 'APlayerControllerBP_C::FFA_Scoreboard_ref' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Start_Widget_blueprint) == 0x0007F8, "Member 'APlayerControllerBP_C::Start_Widget_blueprint' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, The_Spire_Spawner) == 0x000800, "Member 'APlayerControllerBP_C::The_Spire_Spawner' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Tdmer_Island_Spawner) == 0x000808, "Member 'APlayerControllerBP_C::Tdmer_Island_Spawner' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Authority) == 0x000810, "Member 'APlayerControllerBP_C::Authority' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, TDM_Score_UI) == 0x000818, "Member 'APlayerControllerBP_C::TDM_Score_UI' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Server_Gamemode) == 0x000820, "Member 'APlayerControllerBP_C::Server_Gamemode' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, hitmarker) == 0x000830, "Member 'APlayerControllerBP_C::hitmarker' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Hit_gentlemen) == 0x000838, "Member 'APlayerControllerBP_C::Hit_gentlemen' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Open_Cosmetics) == 0x000839, "Member 'APlayerControllerBP_C::Open_Cosmetics' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Open_Weapons) == 0x00083A, "Member 'APlayerControllerBP_C::Open_Weapons' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Permitted) == 0x00083B, "Member 'APlayerControllerBP_C::Permitted' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Fart_Ref) == 0x000840, "Member 'APlayerControllerBP_C::Fart_Ref' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, ChatBox) == 0x000848, "Member 'APlayerControllerBP_C::ChatBox' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, SaveOptions) == 0x000850, "Member 'APlayerControllerBP_C::SaveOptions' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, SaveItems) == 0x000858, "Member 'APlayerControllerBP_C::SaveItems' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Title_Number) == 0x000860, "Member 'APlayerControllerBP_C::Title_Number' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, HatNumber) == 0x000864, "Member 'APlayerControllerBP_C::HatNumber' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Skin_Number) == 0x000868, "Member 'APlayerControllerBP_C::Skin_Number' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Weapon_2) == 0x00086C, "Member 'APlayerControllerBP_C::Weapon_2' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Weapon_1) == 0x000870, "Member 'APlayerControllerBP_C::Weapon_1' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Update_Items) == 0x000878, "Member 'APlayerControllerBP_C::Update_Items' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Facing_Forts_Island) == 0x000888, "Member 'APlayerControllerBP_C::Facing_Forts_Island' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, HudGusRef) == 0x000890, "Member 'APlayerControllerBP_C::HudGusRef' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Damage_Numbers) == 0x000898, "Member 'APlayerControllerBP_C::Damage_Numbers' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, ScoreboardRef) == 0x0008A0, "Member 'APlayerControllerBP_C::ScoreboardRef' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Options_Updated) == 0x0008A8, "Member 'APlayerControllerBP_C::Options_Updated' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Text_Chat) == 0x0008B8, "Member 'APlayerControllerBP_C::Text_Chat' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Team) == 0x0008BC, "Member 'APlayerControllerBP_C::Team' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Win_Screen_var) == 0x0008C0, "Member 'APlayerControllerBP_C::Win_Screen_var' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, On_Team_) == 0x0008C8, "Member 'APlayerControllerBP_C::On_Team_' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Display_Damage_Number_) == 0x0008C9, "Member 'APlayerControllerBP_C::Display_Damage_Number_' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, CTransform) == 0x0008D0, "Member 'APlayerControllerBP_C::CTransform' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Pant_Type) == 0x000930, "Member 'APlayerControllerBP_C::Pant_Type' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Ay) == 0x000940, "Member 'APlayerControllerBP_C::Ay' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Ny) == 0x000944, "Member 'APlayerControllerBP_C::Ny' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Counter) == 0x000948, "Member 'APlayerControllerBP_C::Counter' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Ongoing_vote_) == 0x00094C, "Member 'APlayerControllerBP_C::Ongoing_vote_' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Menu_Ref) == 0x000950, "Member 'APlayerControllerBP_C::Menu_Ref' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Ugandan_chugnus) == 0x000958, "Member 'APlayerControllerBP_C::Ugandan_chugnus' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Host_Name) == 0x000968, "Member 'APlayerControllerBP_C::Host_Name' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, WeatherRef) == 0x000978, "Member 'APlayerControllerBP_C::WeatherRef' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, KoTC_Ref) == 0x000980, "Member 'APlayerControllerBP_C::KoTC_Ref' has a wrong offset!");

}

