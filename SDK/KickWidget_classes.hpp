#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KickWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass KickWidget.KickWidget_C
// 0x00B0 (0x0340 - 0x0290)
class UKickWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             CalledByBox;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Countdown;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             F1Kick;                                            // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             F2Dont;                                            // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ReasonBox;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_0;                                       // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextVoteNo;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextVoteYes;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Kick_;                                             // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0308(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Initiator;                                         // 0x0320(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          VoteKick_;                                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Voted;                                             // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x2];                                      // 0x033A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Counter;                                           // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InpActEvt_F2_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_F1_K2Node_InputKeyEvent_1(const struct FKey& Key);
	class FText Get_TextVoteYes_Text_0();
	class FText Get_TextVoteNo_Text_0();
	void ExecuteUbergraph_KickWidget(int32 EntryPoint);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KickWidget_C">();
	}
	static class UKickWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKickWidget_C>();
	}
};
static_assert(alignof(UKickWidget_C) == 0x000008, "Wrong alignment on UKickWidget_C");
static_assert(sizeof(UKickWidget_C) == 0x000340, "Wrong size on UKickWidget_C");
static_assert(offsetof(UKickWidget_C, UberGraphFrame) == 0x000290, "Member 'UKickWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, CalledByBox) == 0x000298, "Member 'UKickWidget_C::CalledByBox' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Countdown) == 0x0002A0, "Member 'UKickWidget_C::Countdown' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, F1Kick) == 0x0002A8, "Member 'UKickWidget_C::F1Kick' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, F2Dont) == 0x0002B0, "Member 'UKickWidget_C::F2Dont' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Image) == 0x0002B8, "Member 'UKickWidget_C::Image' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Image_0) == 0x0002C0, "Member 'UKickWidget_C::Image_0' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Image_1) == 0x0002C8, "Member 'UKickWidget_C::Image_1' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, ReasonBox) == 0x0002D0, "Member 'UKickWidget_C::ReasonBox' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, TextBlock_0) == 0x0002D8, "Member 'UKickWidget_C::TextBlock_0' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, TextVoteNo) == 0x0002E0, "Member 'UKickWidget_C::TextVoteNo' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, TextVoteYes) == 0x0002E8, "Member 'UKickWidget_C::TextVoteYes' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Name_0) == 0x0002F0, "Member 'UKickWidget_C::Name_0' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Kick_) == 0x000300, "Member 'UKickWidget_C::Kick_' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Text) == 0x000308, "Member 'UKickWidget_C::Text' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Initiator) == 0x000320, "Member 'UKickWidget_C::Initiator' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, VoteKick_) == 0x000338, "Member 'UKickWidget_C::VoteKick_' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Voted) == 0x000339, "Member 'UKickWidget_C::Voted' has a wrong offset!");
static_assert(offsetof(UKickWidget_C, Counter) == 0x00033C, "Member 'UKickWidget_C::Counter' has a wrong offset!");

}

