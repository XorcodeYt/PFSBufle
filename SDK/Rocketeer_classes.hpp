#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Rocketeer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Rocketeer.Rocketeer_C
// 0x0160 (0x0760 - 0x0600)
class ARocketeer_C final : public ACharacter
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   RocketPlacement;                                   // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Rocket_Launcher_Skeleton;                          // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Pivot;                                             // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh2P;                                            // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FP_Gun;                                            // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Explosion_mini;                                    // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Explosion;                                         // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionControllerComponent*             R_MotionController;                                // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionControllerComponent*             L_MotionController;                                // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GunOffset;                                         // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingMotionControllers_;                           // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETouchIndex                                   FingerIndex;                                       // 0x0691(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cooldown_Active_;                                  // 0x0692(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ignore_cooldown;                                   // 0x0693(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Alt_Held_;                                         // 0x0694(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_695[0x3];                                      // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        innerval;                                          // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          still_up_;                                         // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Game_HUD;                                          // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Stamina;                                           // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Stamina_max;                                       // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x06B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Health;                                            // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Health;                                    // 0x06D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_health;                                        // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead_;                                             // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x7];                                      // 0x06E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DeathScreen;                                       // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x06F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerController*>              NewVar_0;                                          // 0x0700(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Omeharocketcooldown;                               // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711[0x7];                                      // 0x0711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxWalkSpeed;                                      // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                RefrenceToTheHitmarker;                            // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sprint_speed;                                      // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Walk_speed;                                        // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ADS;                                               // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOptionsMenuNew_C*                      Menu_Ref;                                          // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SniperSensitivity;                                 // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sens2;                                             // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sens;                                              // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Stop_sprint();
	void Start_sprint();
	void Speed_buff();
	void ServerJump();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnLanded(const struct FHitResult& Hit);
	void letgoaltfireserver();
	void InpTchEvt_K2Node_InputTouchEvent_0(ETouchIndex FingerIndex_0, const struct FVector& Location);
	void _Left_Mouse_K2Node_InputAxisEvent_2(float AxisValue);
	void _Left_K2Node_InputAxisEvent_1(float AxisValue);
	void _Backward_K2Node_InputAxisEvent_0(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_3(float AxisValue);
	void InpActEvt_Sprint_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_F7_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void Fire_server();
	void Fire_multicast();
	void Explosion_client();
	void ExecuteUbergraph_Rocketeer(int32 EntryPoint);
	void Correct_pitch_multicast(const struct FRotator& Rotation_0);
	void Correct_pitch(const struct FRotator& Rotation_0);
	void altfire_server();
	void Altfire_multicast();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Rocketeer_C">();
	}
	static class ARocketeer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARocketeer_C>();
	}
};
static_assert(alignof(ARocketeer_C) == 0x000010, "Wrong alignment on ARocketeer_C");
static_assert(sizeof(ARocketeer_C) == 0x000760, "Wrong size on ARocketeer_C");
static_assert(offsetof(ARocketeer_C, UberGraphFrame) == 0x000600, "Member 'ARocketeer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, FirstPersonCamera) == 0x000608, "Member 'ARocketeer_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, RocketPlacement) == 0x000610, "Member 'ARocketeer_C::RocketPlacement' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Rocket_Launcher_Skeleton) == 0x000618, "Member 'ARocketeer_C::Rocket_Launcher_Skeleton' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Arrow1) == 0x000620, "Member 'ARocketeer_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Pivot) == 0x000628, "Member 'ARocketeer_C::Pivot' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Mesh2P) == 0x000630, "Member 'ARocketeer_C::Mesh2P' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, FP_Gun) == 0x000638, "Member 'ARocketeer_C::FP_Gun' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Explosion_mini) == 0x000640, "Member 'ARocketeer_C::Explosion_mini' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Explosion) == 0x000648, "Member 'ARocketeer_C::Explosion' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, R_MotionController) == 0x000650, "Member 'ARocketeer_C::R_MotionController' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, L_MotionController) == 0x000658, "Member 'ARocketeer_C::L_MotionController' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Sphere) == 0x000660, "Member 'ARocketeer_C::Sphere' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, GunOffset) == 0x000668, "Member 'ARocketeer_C::GunOffset' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, BaseTurnRate) == 0x000680, "Member 'ARocketeer_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, BaseLookUpRate) == 0x000688, "Member 'ARocketeer_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, UsingMotionControllers_) == 0x000690, "Member 'ARocketeer_C::UsingMotionControllers_' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, FingerIndex) == 0x000691, "Member 'ARocketeer_C::FingerIndex' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Cooldown_Active_) == 0x000692, "Member 'ARocketeer_C::Cooldown_Active_' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Ignore_cooldown) == 0x000693, "Member 'ARocketeer_C::Ignore_cooldown' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Alt_Held_) == 0x000694, "Member 'ARocketeer_C::Alt_Held_' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, innerval) == 0x000698, "Member 'ARocketeer_C::innerval' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, still_up_) == 0x0006A0, "Member 'ARocketeer_C::still_up_' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Game_HUD) == 0x0006A8, "Member 'ARocketeer_C::Game_HUD' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Stamina) == 0x0006B0, "Member 'ARocketeer_C::Stamina' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Stamina_max) == 0x0006B4, "Member 'ARocketeer_C::Stamina_max' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Rotation) == 0x0006B8, "Member 'ARocketeer_C::Rotation' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Health) == 0x0006D0, "Member 'ARocketeer_C::Health' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Current_Health) == 0x0006D8, "Member 'ARocketeer_C::Current_Health' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Max_health) == 0x0006E0, "Member 'ARocketeer_C::Max_health' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Dead_) == 0x0006E8, "Member 'ARocketeer_C::Dead_' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, DeathScreen) == 0x0006F0, "Member 'ARocketeer_C::DeathScreen' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Timer) == 0x0006F8, "Member 'ARocketeer_C::Timer' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, NewVar_0) == 0x000700, "Member 'ARocketeer_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Omeharocketcooldown) == 0x000710, "Member 'ARocketeer_C::Omeharocketcooldown' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, MaxWalkSpeed) == 0x000718, "Member 'ARocketeer_C::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, RefrenceToTheHitmarker) == 0x000720, "Member 'ARocketeer_C::RefrenceToTheHitmarker' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Sprint_speed) == 0x000728, "Member 'ARocketeer_C::Sprint_speed' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Walk_speed) == 0x000730, "Member 'ARocketeer_C::Walk_speed' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, ADS) == 0x000738, "Member 'ARocketeer_C::ADS' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Menu_Ref) == 0x000740, "Member 'ARocketeer_C::Menu_Ref' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, SniperSensitivity) == 0x000748, "Member 'ARocketeer_C::SniperSensitivity' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Sens2) == 0x000750, "Member 'ARocketeer_C::Sens2' has a wrong offset!");
static_assert(offsetof(ARocketeer_C, Sens) == 0x000758, "Member 'ARocketeer_C::Sens' has a wrong offset!");

}

