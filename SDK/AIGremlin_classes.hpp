#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIGremlin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AIGremlin.AIGremlin_C
// 0x0080 (0x0680 - 0x0600)
class AAIGremlin_C final : public ACharacter
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       WidgetBoundary;                                    // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HurtBounce_Alpha_74193342449787E41541519425D17044; // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HurtBounce__Direction_74193342449787E41541519425D17044; // 0x0624(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HurtBounce;                                        // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Health;                                            // 0x0630(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead_;                                             // 0x0638(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 Target_Actor;                                      // 0x0650(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Crystalref;                                        // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Overlapinating_;                                   // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ThirdPersonCharacter_C*             As_BP_Third_Person_Character;                      // 0x0668(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          on;                                                // 0x0670(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void OnSuccess_CC82E9FF419B1E2AFA1921AF42F0AA27(EPathFollowingResult MovementResult);
	void OnRep_As_BP_Third_Person_Character();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void HitMulticast(class UAudioComponent* Target);
	void ExecuteUbergraph_AIGremlin(int32 EntryPoint);
	void Deadserver(class AController* Target);
	void DeadMulticast(class AController* Target);
	void BndEvt__AIGremlin_WidgetBoundary_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__AIGremlin_WidgetBoundary_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AIGremlin_Sphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__AIGremlin_Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AIGremlin_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void OnFail_CC82E9FF419B1E2AFA1921AF42F0AA27(EPathFollowingResult MovementResult);
	void HurtBounce__UpdateFunc();
	void HurtBounce__FinishedFunc();
	void HitServer(class UAudioComponent* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AIGremlin_C">();
	}
	static class AAIGremlin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAIGremlin_C>();
	}
};
static_assert(alignof(AAIGremlin_C) == 0x000010, "Wrong alignment on AAIGremlin_C");
static_assert(sizeof(AAIGremlin_C) == 0x000680, "Wrong size on AAIGremlin_C");
static_assert(offsetof(AAIGremlin_C, UberGraphFrame) == 0x000600, "Member 'AAIGremlin_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Sphere) == 0x000608, "Member 'AAIGremlin_C::Sphere' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, PawnSensing) == 0x000610, "Member 'AAIGremlin_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, WidgetBoundary) == 0x000618, "Member 'AAIGremlin_C::WidgetBoundary' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, HurtBounce_Alpha_74193342449787E41541519425D17044) == 0x000620, "Member 'AAIGremlin_C::HurtBounce_Alpha_74193342449787E41541519425D17044' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, HurtBounce__Direction_74193342449787E41541519425D17044) == 0x000624, "Member 'AAIGremlin_C::HurtBounce__Direction_74193342449787E41541519425D17044' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, HurtBounce) == 0x000628, "Member 'AAIGremlin_C::HurtBounce' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Health) == 0x000630, "Member 'AAIGremlin_C::Health' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Dead_) == 0x000638, "Member 'AAIGremlin_C::Dead_' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Name_0) == 0x000640, "Member 'AAIGremlin_C::Name_0' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Target_Actor) == 0x000650, "Member 'AAIGremlin_C::Target_Actor' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Crystalref) == 0x000658, "Member 'AAIGremlin_C::Crystalref' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, Overlapinating_) == 0x000660, "Member 'AAIGremlin_C::Overlapinating_' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, As_BP_Third_Person_Character) == 0x000668, "Member 'AAIGremlin_C::As_BP_Third_Person_Character' has a wrong offset!");
static_assert(offsetof(AAIGremlin_C, on) == 0x000670, "Member 'AAIGremlin_C::on' has a wrong offset!");

}

