#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RocketeerFunny

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass RocketeerFunny.RocketeerFunny_C
// 0x02B0 (0x08B0 - 0x0600)
class ARocketeerFunny_C final : public ACharacter
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Pivot;                                             // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Projectile_spawner;                                // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FPS_Arms;                                          // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Alpha_EC73EEF1440D34C0F4B7E1866D9FCF8E; // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_EC73EEF1440D34C0F4B7E1866D9FCF8E; // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_635[0x3];                                      // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GunOffset;                                         // 0x0640(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                prevVelocity;                                      // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYspeedometer;                                     // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        maxWalk;                                           // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                inputDirection;                                    // 0x0690(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        projectedVelocity;                                 // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        inputSpeed;                                        // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        inputSpeedCopy;                                    // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enableCustomAirAccel;                              // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        accelSpeedCap;                                     // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        maxAccelSpeed;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        accelspeed;                                        // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                impulseVector;                                     // 0x06E0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enablePogo;                                        // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          jumpPressed;                                       // 0x06F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FA[0x6];                                      // 0x06FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        default_friction;                                  // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        default_maxwalkspeed;                              // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        default_braking;                                   // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        default_JumpVelocity;                              // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        trimpDownMultiplier;                               // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrameTime;                                         // 0x0728(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isRampsliding;                                     // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_731[0x7];                                      // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        groundDotProduct;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enableBunnyhopCap;                                 // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        bunnyhopCapFactor;                                 // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        appliedCap;                                        // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        bhopCapSpeed;                                      // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        bhopBleedFactor;                                   // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zvelocity;                                         // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        groundAngleCompare;                                // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZwalkVelocity;                                     // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        rampslideThresholdFactor;                          // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        jumpCooldownTotal;                                 // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enableGroundAccel;                                 // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enableCrouchJump;                                  // 0x0791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_792[0x6];                                      // 0x0792(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        inputSideAxis;                                     // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                inputSideVector;                                   // 0x07A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        inputForwardAxis;                                  // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                inputForwardVector;                                // 0x07C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        legBreakThreshold;                                 // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        rampMomentumFactor;                                // 0x07E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        airAccelerate;                                     // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        trimpDownVertCap;                                  // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        trimpUpMultiplier;                                 // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        trimpUpLateralSlow;                                // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        groundAccelerate;                                  // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          applyingAirAccel;                                  // 0x0810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          applyingGroundAccel;                               // 0x0811(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          jogPressed;                                        // 0x0812(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_813[0x5];                                      // 0x0813(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                trimpImpulse;                                      // 0x0818(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        trimpJumpImpulse;                                  // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        landSndCooldwnTotal;                               // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        trimpLateralImpulse;                               // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          applyingBhopCap;                                   // 0x0848(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isListenServer;                                    // 0x0849(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84A[0x6];                                      // 0x084A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        landSoundCooldown;                                 // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isFiring;                                          // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        jumpSoundCooldown;                                 // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enableSpeedometer;                                 // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_fire;                                          // 0x0869(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving_;                                         // 0x086A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86B[0x1];                                      // 0x086B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Footstep_duration;                                 // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pressed_down;                                      // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_871[0x7];                                      // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Health;                                            // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Im_was_damaged;                                    // 0x0880(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FRotator                               Rotation_of_Camera;                                // 0x0890(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UObject*                                Rocket_freeman_AnimBP;                             // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void ServerTrimp(const struct FVector& ServerTrimpImpulse, double ServerJumpImpulse, double ServerLateralImpulse, bool ClientCalled);
	void ServerResetFriction();
	void ServerRemoveFriction();
	void ServerMaxGround(double SvrMaxAir, bool ClientCalled);
	void ServerMaxAir(double SvrMaxAir, bool fromClient);
	void ServerFire();
	void ServerBhopCap(const struct FVector& ServerBhopCapVector, double ServerBhopCapSpeed);
	void ServerAddRampMomentum();
	void Server_is_not_moving();
	void Server_is_moving();
	void resetFriction();
	void removeFriction();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	bool rampSlide();
	void rampCheck(bool* onSlideableRamp, double* GroundAngleDotproduct);
	void OnRep_Rotation_of_Camera();
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void _Left_Mouse_K2Node_InputAxisEvent_0(float AxisValue);
	void _Left_K2Node_InputAxisEvent_2(float AxisValue);
	void _Backward_K2Node_InputAxisEvent_3(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_1(float AxisValue);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_0(const struct FKey& Key);
	void hitmarker(class APlayerController* OwningPlayer);
	void ExecuteUbergraph_RocketeerFunny(int32 EntryPoint);
	void custom_jump();
	void applyTrimp(double groundDotProduct_0, struct FVector* trimpImpulse_0, double* trimpJumpImpulse_0, double* trimpLateralImpulse_0);
	void applyBhopCap(double* bhopCapNewSpeed, struct FVector* bhopCapVector, bool* Applyingcap);
	void addRampMomentum();
	void accelerateGround(const struct FVector& forwardVector, double ForwardAxis, const struct FVector& sideVector, double sideAxis, const struct FVector& prevVelocity_0, struct FVector* GroundAccelDir, bool* applyingGroundAccel_0, double* CalcMaxWalk);
	void accelerateAir(const struct FVector& forwardVector, double ForwardAxis, const struct FVector& sideVector, double sideAxis, double* calcMaxAir, struct FVector* AirAccelDir, bool* applyingAirAccel_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RocketeerFunny_C">();
	}
	static class ARocketeerFunny_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARocketeerFunny_C>();
	}
};
static_assert(alignof(ARocketeerFunny_C) == 0x000010, "Wrong alignment on ARocketeerFunny_C");
static_assert(sizeof(ARocketeerFunny_C) == 0x0008B0, "Wrong size on ARocketeerFunny_C");
static_assert(offsetof(ARocketeerFunny_C, UberGraphFrame) == 0x000600, "Member 'ARocketeerFunny_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Pivot) == 0x000608, "Member 'ARocketeerFunny_C::Pivot' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, SkeletalMesh) == 0x000610, "Member 'ARocketeerFunny_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Projectile_spawner) == 0x000618, "Member 'ARocketeerFunny_C::Projectile_spawner' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, FPS_Arms) == 0x000620, "Member 'ARocketeerFunny_C::FPS_Arms' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, FirstPersonCamera) == 0x000628, "Member 'ARocketeerFunny_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Timeline_0_Alpha_EC73EEF1440D34C0F4B7E1866D9FCF8E) == 0x000630, "Member 'ARocketeerFunny_C::Timeline_0_Alpha_EC73EEF1440D34C0F4B7E1866D9FCF8E' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Timeline_0__Direction_EC73EEF1440D34C0F4B7E1866D9FCF8E) == 0x000634, "Member 'ARocketeerFunny_C::Timeline_0__Direction_EC73EEF1440D34C0F4B7E1866D9FCF8E' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Timeline_0) == 0x000638, "Member 'ARocketeerFunny_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, GunOffset) == 0x000640, "Member 'ARocketeerFunny_C::GunOffset' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, BaseTurnRate) == 0x000658, "Member 'ARocketeerFunny_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, BaseLookUpRate) == 0x000660, "Member 'ARocketeerFunny_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, prevVelocity) == 0x000668, "Member 'ARocketeerFunny_C::prevVelocity' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, XYspeedometer) == 0x000680, "Member 'ARocketeerFunny_C::XYspeedometer' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, maxWalk) == 0x000688, "Member 'ARocketeerFunny_C::maxWalk' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputDirection) == 0x000690, "Member 'ARocketeerFunny_C::inputDirection' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, projectedVelocity) == 0x0006A8, "Member 'ARocketeerFunny_C::projectedVelocity' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputSpeed) == 0x0006B0, "Member 'ARocketeerFunny_C::inputSpeed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputSpeedCopy) == 0x0006B8, "Member 'ARocketeerFunny_C::inputSpeedCopy' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, enableCustomAirAccel) == 0x0006C0, "Member 'ARocketeerFunny_C::enableCustomAirAccel' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, accelSpeedCap) == 0x0006C8, "Member 'ARocketeerFunny_C::accelSpeedCap' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, maxAccelSpeed) == 0x0006D0, "Member 'ARocketeerFunny_C::maxAccelSpeed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, accelspeed) == 0x0006D8, "Member 'ARocketeerFunny_C::accelspeed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, impulseVector) == 0x0006E0, "Member 'ARocketeerFunny_C::impulseVector' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, enablePogo) == 0x0006F8, "Member 'ARocketeerFunny_C::enablePogo' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, jumpPressed) == 0x0006F9, "Member 'ARocketeerFunny_C::jumpPressed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, default_friction) == 0x000700, "Member 'ARocketeerFunny_C::default_friction' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, default_maxwalkspeed) == 0x000708, "Member 'ARocketeerFunny_C::default_maxwalkspeed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, default_braking) == 0x000710, "Member 'ARocketeerFunny_C::default_braking' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, default_JumpVelocity) == 0x000718, "Member 'ARocketeerFunny_C::default_JumpVelocity' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpDownMultiplier) == 0x000720, "Member 'ARocketeerFunny_C::trimpDownMultiplier' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, FrameTime) == 0x000728, "Member 'ARocketeerFunny_C::FrameTime' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, isRampsliding) == 0x000730, "Member 'ARocketeerFunny_C::isRampsliding' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, groundDotProduct) == 0x000738, "Member 'ARocketeerFunny_C::groundDotProduct' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, enableBunnyhopCap) == 0x000740, "Member 'ARocketeerFunny_C::enableBunnyhopCap' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, bunnyhopCapFactor) == 0x000748, "Member 'ARocketeerFunny_C::bunnyhopCapFactor' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, appliedCap) == 0x000750, "Member 'ARocketeerFunny_C::appliedCap' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, bhopCapSpeed) == 0x000758, "Member 'ARocketeerFunny_C::bhopCapSpeed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, bhopBleedFactor) == 0x000760, "Member 'ARocketeerFunny_C::bhopBleedFactor' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Zvelocity) == 0x000768, "Member 'ARocketeerFunny_C::Zvelocity' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, groundAngleCompare) == 0x000770, "Member 'ARocketeerFunny_C::groundAngleCompare' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, ZwalkVelocity) == 0x000778, "Member 'ARocketeerFunny_C::ZwalkVelocity' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, rampslideThresholdFactor) == 0x000780, "Member 'ARocketeerFunny_C::rampslideThresholdFactor' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, jumpCooldownTotal) == 0x000788, "Member 'ARocketeerFunny_C::jumpCooldownTotal' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, enableGroundAccel) == 0x000790, "Member 'ARocketeerFunny_C::enableGroundAccel' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, enableCrouchJump) == 0x000791, "Member 'ARocketeerFunny_C::enableCrouchJump' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputSideAxis) == 0x000798, "Member 'ARocketeerFunny_C::inputSideAxis' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputSideVector) == 0x0007A0, "Member 'ARocketeerFunny_C::inputSideVector' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputForwardAxis) == 0x0007B8, "Member 'ARocketeerFunny_C::inputForwardAxis' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, inputForwardVector) == 0x0007C0, "Member 'ARocketeerFunny_C::inputForwardVector' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, legBreakThreshold) == 0x0007D8, "Member 'ARocketeerFunny_C::legBreakThreshold' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, rampMomentumFactor) == 0x0007E0, "Member 'ARocketeerFunny_C::rampMomentumFactor' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, airAccelerate) == 0x0007E8, "Member 'ARocketeerFunny_C::airAccelerate' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpDownVertCap) == 0x0007F0, "Member 'ARocketeerFunny_C::trimpDownVertCap' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpUpMultiplier) == 0x0007F8, "Member 'ARocketeerFunny_C::trimpUpMultiplier' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpUpLateralSlow) == 0x000800, "Member 'ARocketeerFunny_C::trimpUpLateralSlow' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, groundAccelerate) == 0x000808, "Member 'ARocketeerFunny_C::groundAccelerate' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, applyingAirAccel) == 0x000810, "Member 'ARocketeerFunny_C::applyingAirAccel' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, applyingGroundAccel) == 0x000811, "Member 'ARocketeerFunny_C::applyingGroundAccel' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, jogPressed) == 0x000812, "Member 'ARocketeerFunny_C::jogPressed' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpImpulse) == 0x000818, "Member 'ARocketeerFunny_C::trimpImpulse' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpJumpImpulse) == 0x000830, "Member 'ARocketeerFunny_C::trimpJumpImpulse' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, landSndCooldwnTotal) == 0x000838, "Member 'ARocketeerFunny_C::landSndCooldwnTotal' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, trimpLateralImpulse) == 0x000840, "Member 'ARocketeerFunny_C::trimpLateralImpulse' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, applyingBhopCap) == 0x000848, "Member 'ARocketeerFunny_C::applyingBhopCap' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, isListenServer) == 0x000849, "Member 'ARocketeerFunny_C::isListenServer' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, landSoundCooldown) == 0x000850, "Member 'ARocketeerFunny_C::landSoundCooldown' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, isFiring) == 0x000858, "Member 'ARocketeerFunny_C::isFiring' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, jumpSoundCooldown) == 0x000860, "Member 'ARocketeerFunny_C::jumpSoundCooldown' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, enableSpeedometer) == 0x000868, "Member 'ARocketeerFunny_C::enableSpeedometer' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Can_fire) == 0x000869, "Member 'ARocketeerFunny_C::Can_fire' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, IsMoving_) == 0x00086A, "Member 'ARocketeerFunny_C::IsMoving_' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Footstep_duration) == 0x00086C, "Member 'ARocketeerFunny_C::Footstep_duration' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Pressed_down) == 0x000870, "Member 'ARocketeerFunny_C::Pressed_down' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Health) == 0x000878, "Member 'ARocketeerFunny_C::Health' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Im_was_damaged) == 0x000880, "Member 'ARocketeerFunny_C::Im_was_damaged' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Rotation_of_Camera) == 0x000890, "Member 'ARocketeerFunny_C::Rotation_of_Camera' has a wrong offset!");
static_assert(offsetof(ARocketeerFunny_C, Rocket_freeman_AnimBP) == 0x0008A8, "Member 'ARocketeerFunny_C::Rocket_freeman_AnimBP' has a wrong offset!");

}

